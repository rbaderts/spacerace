/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('./github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.exportSymbol('proto.core.ClientMessage', null, global);
goog.exportSymbol('proto.core.ClientMessages', null, global);
goog.exportSymbol('proto.core.CommandType', null, global);
goog.exportSymbol('proto.core.ForceType', null, global);
goog.exportSymbol('proto.core.MessageType', null, global);
goog.exportSymbol('proto.core.PlayerCommandMessage', null, global);
goog.exportSymbol('proto.core.PlayerResourceType', null, global);
goog.exportSymbol('proto.core.PlayerState', null, global);
goog.exportSymbol('proto.core.PlayerState.Inventory', null, global);
goog.exportSymbol('proto.core.Property', null, global);
goog.exportSymbol('proto.core.ServerMessage', null, global);
goog.exportSymbol('proto.core.ServerMessage.DrawData', null, global);
goog.exportSymbol('proto.core.ServerMessage.InitializePlayerData', null, global);
goog.exportSymbol('proto.core.ServerMessage.PhysicsUpdateData', null, global);
goog.exportSymbol('proto.core.ServerMessage.PlaySoundData', null, global);
goog.exportSymbol('proto.core.ServerMessage.PlayerDeadData', null, global);
goog.exportSymbol('proto.core.ServerMessage.PlayerUpdateData', null, global);
goog.exportSymbol('proto.core.SoundType', null, global);
goog.exportSymbol('proto.core.SpriteState', null, global);
goog.exportSymbol('proto.core.SpriteStatus', null, global);
goog.exportSymbol('proto.core.SpriteType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.Property = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core.Property.displayName = 'proto.core.Property';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.Property.prototype.toObject = function(opt_includeInstance) {
  return proto.core.Property.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.Property} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.Property.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: jspb.Message.getField(msg, 1),
    value: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.Property}
 */
proto.core.Property.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.Property;
  return proto.core.Property.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.Property}
 */
proto.core.Property.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.Property.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.Property.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string resource = 1;
 * @return {string}
 */
proto.core.Property.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.core.Property.prototype.setResource = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.core.Property.prototype.clearResource = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.Property.prototype.hasResource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string value = 2;
 * @return {string}
 */
proto.core.Property.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.core.Property.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.core.Property.prototype.clearValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.Property.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.SpriteState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.SpriteState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core.SpriteState.displayName = 'proto.core.SpriteState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.SpriteState.prototype.toObject = function(opt_includeInstance) {
  return proto.core.SpriteState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.SpriteState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.SpriteState.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    typ: jspb.Message.getField(msg, 2),
    x: +jspb.Message.getField(msg, 3),
    y: +jspb.Message.getField(msg, 4),
    vx: +jspb.Message.getField(msg, 5),
    vy: +jspb.Message.getField(msg, 6),
    height: jspb.Message.getField(msg, 7),
    width: jspb.Message.getField(msg, 8),
    rotation: +jspb.Message.getField(msg, 9),
    mass: +jspb.Message.getField(msg, 10),
    playerid: jspb.Message.getField(msg, 11),
    playername: jspb.Message.getField(msg, 12)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.SpriteState}
 */
proto.core.SpriteState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.SpriteState;
  return proto.core.SpriteState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.SpriteState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.SpriteState}
 */
proto.core.SpriteState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTyp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVy(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRotation(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMass(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.SpriteState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.SpriteState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.SpriteState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.SpriteState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * required int32 id = 1;
 * @return {number}
 */
proto.core.SpriteState.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.core.SpriteState.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.core.SpriteState.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.SpriteState.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 typ = 2;
 * @return {number}
 */
proto.core.SpriteState.prototype.getTyp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.core.SpriteState.prototype.setTyp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.core.SpriteState.prototype.clearTyp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.SpriteState.prototype.hasTyp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required double x = 3;
 * @return {number}
 */
proto.core.SpriteState.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.core.SpriteState.prototype.setX = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.core.SpriteState.prototype.clearX = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.SpriteState.prototype.hasX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required double y = 4;
 * @return {number}
 */
proto.core.SpriteState.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.core.SpriteState.prototype.setY = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.core.SpriteState.prototype.clearY = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.SpriteState.prototype.hasY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required double vx = 5;
 * @return {number}
 */
proto.core.SpriteState.prototype.getVx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.core.SpriteState.prototype.setVx = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.core.SpriteState.prototype.clearVx = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.SpriteState.prototype.hasVx = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required double vy = 6;
 * @return {number}
 */
proto.core.SpriteState.prototype.getVy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.core.SpriteState.prototype.setVy = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.core.SpriteState.prototype.clearVy = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.SpriteState.prototype.hasVy = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 height = 7;
 * @return {number}
 */
proto.core.SpriteState.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.core.SpriteState.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.core.SpriteState.prototype.clearHeight = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.SpriteState.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int32 width = 8;
 * @return {number}
 */
proto.core.SpriteState.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.core.SpriteState.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.core.SpriteState.prototype.clearWidth = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.SpriteState.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required double rotation = 9;
 * @return {number}
 */
proto.core.SpriteState.prototype.getRotation = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.core.SpriteState.prototype.setRotation = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.core.SpriteState.prototype.clearRotation = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.SpriteState.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required double mass = 10;
 * @return {number}
 */
proto.core.SpriteState.prototype.getMass = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.core.SpriteState.prototype.setMass = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.core.SpriteState.prototype.clearMass = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.SpriteState.prototype.hasMass = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required int32 playerId = 11;
 * @return {number}
 */
proto.core.SpriteState.prototype.getPlayerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.core.SpriteState.prototype.setPlayerid = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.core.SpriteState.prototype.clearPlayerid = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.SpriteState.prototype.hasPlayerid = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required string playerName = 12;
 * @return {string}
 */
proto.core.SpriteState.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.core.SpriteState.prototype.setPlayername = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.core.SpriteState.prototype.clearPlayername = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.SpriteState.prototype.hasPlayername = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.PlayerState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.core.PlayerState.repeatedFields_, null);
};
goog.inherits(proto.core.PlayerState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core.PlayerState.displayName = 'proto.core.PlayerState';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.core.PlayerState.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.PlayerState.prototype.toObject = function(opt_includeInstance) {
  return proto.core.PlayerState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.PlayerState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.PlayerState.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2),
    shipid: jspb.Message.getField(msg, 3),
    inventoryList: jspb.Message.toObjectList(msg.getInventoryList(),
    proto.core.PlayerState.Inventory.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.PlayerState}
 */
proto.core.PlayerState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.PlayerState;
  return proto.core.PlayerState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.PlayerState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.PlayerState}
 */
proto.core.PlayerState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShipid(value);
      break;
    case 4:
      var value = new proto.core.PlayerState.Inventory;
      reader.readMessage(value,proto.core.PlayerState.Inventory.deserializeBinaryFromReader);
      msg.addInventory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.PlayerState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.PlayerState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.PlayerState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.PlayerState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getInventoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.core.PlayerState.Inventory.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.PlayerState.Inventory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.PlayerState.Inventory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core.PlayerState.Inventory.displayName = 'proto.core.PlayerState.Inventory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.PlayerState.Inventory.prototype.toObject = function(opt_includeInstance) {
  return proto.core.PlayerState.Inventory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.PlayerState.Inventory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.PlayerState.Inventory.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourcetype: jspb.Message.getField(msg, 1),
    value: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.PlayerState.Inventory}
 */
proto.core.PlayerState.Inventory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.PlayerState.Inventory;
  return proto.core.PlayerState.Inventory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.PlayerState.Inventory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.PlayerState.Inventory}
 */
proto.core.PlayerState.Inventory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.core.PlayerResourceType} */ (reader.readEnum());
      msg.setResourcetype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.PlayerState.Inventory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.PlayerState.Inventory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.PlayerState.Inventory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.PlayerState.Inventory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.core.PlayerResourceType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required PlayerResourceType resourceType = 1;
 * @return {!proto.core.PlayerResourceType}
 */
proto.core.PlayerState.Inventory.prototype.getResourcetype = function() {
  return /** @type {!proto.core.PlayerResourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.core.PlayerResourceType} value */
proto.core.PlayerState.Inventory.prototype.setResourcetype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.core.PlayerState.Inventory.prototype.clearResourcetype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.PlayerState.Inventory.prototype.hasResourcetype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 value = 2;
 * @return {number}
 */
proto.core.PlayerState.Inventory.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.core.PlayerState.Inventory.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.core.PlayerState.Inventory.prototype.clearValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.PlayerState.Inventory.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 id = 1;
 * @return {number}
 */
proto.core.PlayerState.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.core.PlayerState.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.core.PlayerState.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.PlayerState.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string name = 2;
 * @return {string}
 */
proto.core.PlayerState.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.core.PlayerState.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.core.PlayerState.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.PlayerState.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 shipId = 3;
 * @return {number}
 */
proto.core.PlayerState.prototype.getShipid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.core.PlayerState.prototype.setShipid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.core.PlayerState.prototype.clearShipid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.PlayerState.prototype.hasShipid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Inventory inventory = 4;
 * @return {!Array.<!proto.core.PlayerState.Inventory>}
 */
proto.core.PlayerState.prototype.getInventoryList = function() {
  return /** @type{!Array.<!proto.core.PlayerState.Inventory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.core.PlayerState.Inventory, 4));
};


/** @param {!Array.<!proto.core.PlayerState.Inventory>} value */
proto.core.PlayerState.prototype.setInventoryList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.core.PlayerState.Inventory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.core.PlayerState.Inventory}
 */
proto.core.PlayerState.prototype.addInventory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.core.PlayerState.Inventory, opt_index);
};


proto.core.PlayerState.prototype.clearInventoryList = function() {
  this.setInventoryList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.ServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.ServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core.ServerMessage.displayName = 'proto.core.ServerMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.ServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.core.ServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.ServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    typ: jspb.Message.getField(msg, 1),
    update: (f = msg.getUpdate()) && proto.core.ServerMessage.PhysicsUpdateData.toObject(includeInstance, f),
    players: (f = msg.getPlayers()) && proto.core.ServerMessage.PlayerUpdateData.toObject(includeInstance, f),
    initialize: (f = msg.getInitialize()) && proto.core.ServerMessage.InitializePlayerData.toObject(includeInstance, f),
    sound: (f = msg.getSound()) && proto.core.ServerMessage.PlaySoundData.toObject(includeInstance, f),
    draw: (f = msg.getDraw()) && proto.core.ServerMessage.DrawData.toObject(includeInstance, f),
    dead: (f = msg.getDead()) && proto.core.ServerMessage.PlayerDeadData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.ServerMessage}
 */
proto.core.ServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.ServerMessage;
  return proto.core.ServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.ServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.ServerMessage}
 */
proto.core.ServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.core.MessageType} */ (reader.readEnum());
      msg.setTyp(value);
      break;
    case 2:
      var value = new proto.core.ServerMessage.PhysicsUpdateData;
      reader.readMessage(value,proto.core.ServerMessage.PhysicsUpdateData.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    case 3:
      var value = new proto.core.ServerMessage.PlayerUpdateData;
      reader.readMessage(value,proto.core.ServerMessage.PlayerUpdateData.deserializeBinaryFromReader);
      msg.setPlayers(value);
      break;
    case 4:
      var value = new proto.core.ServerMessage.InitializePlayerData;
      reader.readMessage(value,proto.core.ServerMessage.InitializePlayerData.deserializeBinaryFromReader);
      msg.setInitialize(value);
      break;
    case 5:
      var value = new proto.core.ServerMessage.PlaySoundData;
      reader.readMessage(value,proto.core.ServerMessage.PlaySoundData.deserializeBinaryFromReader);
      msg.setSound(value);
      break;
    case 6:
      var value = new proto.core.ServerMessage.DrawData;
      reader.readMessage(value,proto.core.ServerMessage.DrawData.deserializeBinaryFromReader);
      msg.setDraw(value);
      break;
    case 7:
      var value = new proto.core.ServerMessage.PlayerDeadData;
      reader.readMessage(value,proto.core.ServerMessage.PlayerDeadData.deserializeBinaryFromReader);
      msg.setDead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.ServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.ServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.ServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.core.MessageType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.core.ServerMessage.PhysicsUpdateData.serializeBinaryToWriter
    );
  }
  f = message.getPlayers();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.core.ServerMessage.PlayerUpdateData.serializeBinaryToWriter
    );
  }
  f = message.getInitialize();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.core.ServerMessage.InitializePlayerData.serializeBinaryToWriter
    );
  }
  f = message.getSound();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.core.ServerMessage.PlaySoundData.serializeBinaryToWriter
    );
  }
  f = message.getDraw();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.core.ServerMessage.DrawData.serializeBinaryToWriter
    );
  }
  f = message.getDead();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.core.ServerMessage.PlayerDeadData.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.ServerMessage.PhysicsUpdateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.core.ServerMessage.PhysicsUpdateData.repeatedFields_, null);
};
goog.inherits(proto.core.ServerMessage.PhysicsUpdateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core.ServerMessage.PhysicsUpdateData.displayName = 'proto.core.ServerMessage.PhysicsUpdateData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.core.ServerMessage.PhysicsUpdateData.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.ServerMessage.PhysicsUpdateData.prototype.toObject = function(opt_includeInstance) {
  return proto.core.ServerMessage.PhysicsUpdateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.ServerMessage.PhysicsUpdateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ServerMessage.PhysicsUpdateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeNanos: jspb.Message.getField(msg, 1),
    frame: jspb.Message.getField(msg, 2),
    actionid: jspb.Message.getField(msg, 3),
    spritesList: jspb.Message.toObjectList(msg.getSpritesList(),
    proto.core.SpriteState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.ServerMessage.PhysicsUpdateData}
 */
proto.core.ServerMessage.PhysicsUpdateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.ServerMessage.PhysicsUpdateData;
  return proto.core.ServerMessage.PhysicsUpdateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.ServerMessage.PhysicsUpdateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.ServerMessage.PhysicsUpdateData}
 */
proto.core.ServerMessage.PhysicsUpdateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeNanos(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrame(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActionid(value);
      break;
    case 6:
      var value = new proto.core.SpriteState;
      reader.readMessage(value,proto.core.SpriteState.deserializeBinaryFromReader);
      msg.addSprites(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.ServerMessage.PhysicsUpdateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.ServerMessage.PhysicsUpdateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.ServerMessage.PhysicsUpdateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ServerMessage.PhysicsUpdateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSpritesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.core.SpriteState.serializeBinaryToWriter
    );
  }
};


/**
 * required int64 time_nanos = 1;
 * @return {number}
 */
proto.core.ServerMessage.PhysicsUpdateData.prototype.getTimeNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.core.ServerMessage.PhysicsUpdateData.prototype.setTimeNanos = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.core.ServerMessage.PhysicsUpdateData.prototype.clearTimeNanos = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.PhysicsUpdateData.prototype.hasTimeNanos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 frame = 2;
 * @return {number}
 */
proto.core.ServerMessage.PhysicsUpdateData.prototype.getFrame = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.core.ServerMessage.PhysicsUpdateData.prototype.setFrame = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.core.ServerMessage.PhysicsUpdateData.prototype.clearFrame = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.PhysicsUpdateData.prototype.hasFrame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 actionid = 3;
 * @return {number}
 */
proto.core.ServerMessage.PhysicsUpdateData.prototype.getActionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.core.ServerMessage.PhysicsUpdateData.prototype.setActionid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.core.ServerMessage.PhysicsUpdateData.prototype.clearActionid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.PhysicsUpdateData.prototype.hasActionid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated SpriteState sprites = 6;
 * @return {!Array.<!proto.core.SpriteState>}
 */
proto.core.ServerMessage.PhysicsUpdateData.prototype.getSpritesList = function() {
  return /** @type{!Array.<!proto.core.SpriteState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.core.SpriteState, 6));
};


/** @param {!Array.<!proto.core.SpriteState>} value */
proto.core.ServerMessage.PhysicsUpdateData.prototype.setSpritesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.core.SpriteState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.core.SpriteState}
 */
proto.core.ServerMessage.PhysicsUpdateData.prototype.addSprites = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.core.SpriteState, opt_index);
};


proto.core.ServerMessage.PhysicsUpdateData.prototype.clearSpritesList = function() {
  this.setSpritesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.ServerMessage.PlayerUpdateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.ServerMessage.PlayerUpdateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core.ServerMessage.PlayerUpdateData.displayName = 'proto.core.ServerMessage.PlayerUpdateData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.ServerMessage.PlayerUpdateData.prototype.toObject = function(opt_includeInstance) {
  return proto.core.ServerMessage.PlayerUpdateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.ServerMessage.PlayerUpdateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ServerMessage.PlayerUpdateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    player: (f = msg.getPlayer()) && proto.core.PlayerState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.ServerMessage.PlayerUpdateData}
 */
proto.core.ServerMessage.PlayerUpdateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.ServerMessage.PlayerUpdateData;
  return proto.core.ServerMessage.PlayerUpdateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.ServerMessage.PlayerUpdateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.ServerMessage.PlayerUpdateData}
 */
proto.core.ServerMessage.PlayerUpdateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.core.PlayerState;
      reader.readMessage(value,proto.core.PlayerState.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.ServerMessage.PlayerUpdateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.ServerMessage.PlayerUpdateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.ServerMessage.PlayerUpdateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ServerMessage.PlayerUpdateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.core.PlayerState.serializeBinaryToWriter
    );
  }
};


/**
 * required PlayerState player = 1;
 * @return {!proto.core.PlayerState}
 */
proto.core.ServerMessage.PlayerUpdateData.prototype.getPlayer = function() {
  return /** @type{!proto.core.PlayerState} */ (
    jspb.Message.getWrapperField(this, proto.core.PlayerState, 1, 1));
};


/** @param {!proto.core.PlayerState} value */
proto.core.ServerMessage.PlayerUpdateData.prototype.setPlayer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.core.ServerMessage.PlayerUpdateData.prototype.clearPlayer = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.PlayerUpdateData.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.ServerMessage.InitializePlayerData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.ServerMessage.InitializePlayerData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core.ServerMessage.InitializePlayerData.displayName = 'proto.core.ServerMessage.InitializePlayerData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.ServerMessage.InitializePlayerData.prototype.toObject = function(opt_includeInstance) {
  return proto.core.ServerMessage.InitializePlayerData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.ServerMessage.InitializePlayerData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ServerMessage.InitializePlayerData.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getField(msg, 1),
    shipid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.ServerMessage.InitializePlayerData}
 */
proto.core.ServerMessage.InitializePlayerData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.ServerMessage.InitializePlayerData;
  return proto.core.ServerMessage.InitializePlayerData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.ServerMessage.InitializePlayerData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.ServerMessage.InitializePlayerData}
 */
proto.core.ServerMessage.InitializePlayerData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShipid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.ServerMessage.InitializePlayerData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.ServerMessage.InitializePlayerData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.ServerMessage.InitializePlayerData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ServerMessage.InitializePlayerData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 playerId = 1;
 * @return {number}
 */
proto.core.ServerMessage.InitializePlayerData.prototype.getPlayerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.core.ServerMessage.InitializePlayerData.prototype.setPlayerid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.core.ServerMessage.InitializePlayerData.prototype.clearPlayerid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.InitializePlayerData.prototype.hasPlayerid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 shipId = 2;
 * @return {number}
 */
proto.core.ServerMessage.InitializePlayerData.prototype.getShipid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.core.ServerMessage.InitializePlayerData.prototype.setShipid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.core.ServerMessage.InitializePlayerData.prototype.clearShipid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.InitializePlayerData.prototype.hasShipid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.ServerMessage.PlaySoundData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.ServerMessage.PlaySoundData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core.ServerMessage.PlaySoundData.displayName = 'proto.core.ServerMessage.PlaySoundData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.ServerMessage.PlaySoundData.prototype.toObject = function(opt_includeInstance) {
  return proto.core.ServerMessage.PlaySoundData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.ServerMessage.PlaySoundData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ServerMessage.PlaySoundData.toObject = function(includeInstance, msg) {
  var f, obj = {
    soundtype: jspb.Message.getField(msg, 1),
    volume: jspb.Message.getOptionalFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.ServerMessage.PlaySoundData}
 */
proto.core.ServerMessage.PlaySoundData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.ServerMessage.PlaySoundData;
  return proto.core.ServerMessage.PlaySoundData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.ServerMessage.PlaySoundData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.ServerMessage.PlaySoundData}
 */
proto.core.ServerMessage.PlaySoundData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.core.SoundType} */ (reader.readEnum());
      msg.setSoundtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.ServerMessage.PlaySoundData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.ServerMessage.PlaySoundData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.ServerMessage.PlaySoundData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ServerMessage.PlaySoundData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.core.SoundType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * required SoundType soundType = 1;
 * @return {!proto.core.SoundType}
 */
proto.core.ServerMessage.PlaySoundData.prototype.getSoundtype = function() {
  return /** @type {!proto.core.SoundType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.core.SoundType} value */
proto.core.ServerMessage.PlaySoundData.prototype.setSoundtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.core.ServerMessage.PlaySoundData.prototype.clearSoundtype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.PlaySoundData.prototype.hasSoundtype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double volume = 2;
 * @return {number}
 */
proto.core.ServerMessage.PlaySoundData.prototype.getVolume = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.core.ServerMessage.PlaySoundData.prototype.setVolume = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.core.ServerMessage.PlaySoundData.prototype.clearVolume = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.PlaySoundData.prototype.hasVolume = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.ServerMessage.DrawData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.core.ServerMessage.DrawData.repeatedFields_, null);
};
goog.inherits(proto.core.ServerMessage.DrawData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core.ServerMessage.DrawData.displayName = 'proto.core.ServerMessage.DrawData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.core.ServerMessage.DrawData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.ServerMessage.DrawData.prototype.toObject = function(opt_includeInstance) {
  return proto.core.ServerMessage.DrawData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.ServerMessage.DrawData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ServerMessage.DrawData.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmdsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.ServerMessage.DrawData}
 */
proto.core.ServerMessage.DrawData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.ServerMessage.DrawData;
  return proto.core.ServerMessage.DrawData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.ServerMessage.DrawData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.ServerMessage.DrawData}
 */
proto.core.ServerMessage.DrawData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCmds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.ServerMessage.DrawData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.ServerMessage.DrawData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.ServerMessage.DrawData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ServerMessage.DrawData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCmdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string cmds = 1;
 * @return {!Array.<string>}
 */
proto.core.ServerMessage.DrawData.prototype.getCmdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.core.ServerMessage.DrawData.prototype.setCmdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.core.ServerMessage.DrawData.prototype.addCmds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.core.ServerMessage.DrawData.prototype.clearCmdsList = function() {
  this.setCmdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.ServerMessage.PlayerDeadData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.ServerMessage.PlayerDeadData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core.ServerMessage.PlayerDeadData.displayName = 'proto.core.ServerMessage.PlayerDeadData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.ServerMessage.PlayerDeadData.prototype.toObject = function(opt_includeInstance) {
  return proto.core.ServerMessage.PlayerDeadData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.ServerMessage.PlayerDeadData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ServerMessage.PlayerDeadData.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.ServerMessage.PlayerDeadData}
 */
proto.core.ServerMessage.PlayerDeadData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.ServerMessage.PlayerDeadData;
  return proto.core.ServerMessage.PlayerDeadData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.ServerMessage.PlayerDeadData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.ServerMessage.PlayerDeadData}
 */
proto.core.ServerMessage.PlayerDeadData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.ServerMessage.PlayerDeadData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.ServerMessage.PlayerDeadData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.ServerMessage.PlayerDeadData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ServerMessage.PlayerDeadData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 playerId = 1;
 * @return {number}
 */
proto.core.ServerMessage.PlayerDeadData.prototype.getPlayerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.core.ServerMessage.PlayerDeadData.prototype.setPlayerid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.core.ServerMessage.PlayerDeadData.prototype.clearPlayerid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.PlayerDeadData.prototype.hasPlayerid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required MessageType typ = 1;
 * @return {!proto.core.MessageType}
 */
proto.core.ServerMessage.prototype.getTyp = function() {
  return /** @type {!proto.core.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.core.MessageType} value */
proto.core.ServerMessage.prototype.setTyp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.core.ServerMessage.prototype.clearTyp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.prototype.hasTyp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PhysicsUpdateData update = 2;
 * @return {?proto.core.ServerMessage.PhysicsUpdateData}
 */
proto.core.ServerMessage.prototype.getUpdate = function() {
  return /** @type{?proto.core.ServerMessage.PhysicsUpdateData} */ (
    jspb.Message.getWrapperField(this, proto.core.ServerMessage.PhysicsUpdateData, 2));
};


/** @param {?proto.core.ServerMessage.PhysicsUpdateData|undefined} value */
proto.core.ServerMessage.prototype.setUpdate = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.core.ServerMessage.prototype.clearUpdate = function() {
  this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PlayerUpdateData players = 3;
 * @return {?proto.core.ServerMessage.PlayerUpdateData}
 */
proto.core.ServerMessage.prototype.getPlayers = function() {
  return /** @type{?proto.core.ServerMessage.PlayerUpdateData} */ (
    jspb.Message.getWrapperField(this, proto.core.ServerMessage.PlayerUpdateData, 3));
};


/** @param {?proto.core.ServerMessage.PlayerUpdateData|undefined} value */
proto.core.ServerMessage.prototype.setPlayers = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.core.ServerMessage.prototype.clearPlayers = function() {
  this.setPlayers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.prototype.hasPlayers = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional InitializePlayerData initialize = 4;
 * @return {?proto.core.ServerMessage.InitializePlayerData}
 */
proto.core.ServerMessage.prototype.getInitialize = function() {
  return /** @type{?proto.core.ServerMessage.InitializePlayerData} */ (
    jspb.Message.getWrapperField(this, proto.core.ServerMessage.InitializePlayerData, 4));
};


/** @param {?proto.core.ServerMessage.InitializePlayerData|undefined} value */
proto.core.ServerMessage.prototype.setInitialize = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.core.ServerMessage.prototype.clearInitialize = function() {
  this.setInitialize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.prototype.hasInitialize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PlaySoundData sound = 5;
 * @return {?proto.core.ServerMessage.PlaySoundData}
 */
proto.core.ServerMessage.prototype.getSound = function() {
  return /** @type{?proto.core.ServerMessage.PlaySoundData} */ (
    jspb.Message.getWrapperField(this, proto.core.ServerMessage.PlaySoundData, 5));
};


/** @param {?proto.core.ServerMessage.PlaySoundData|undefined} value */
proto.core.ServerMessage.prototype.setSound = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.core.ServerMessage.prototype.clearSound = function() {
  this.setSound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.prototype.hasSound = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DrawData draw = 6;
 * @return {?proto.core.ServerMessage.DrawData}
 */
proto.core.ServerMessage.prototype.getDraw = function() {
  return /** @type{?proto.core.ServerMessage.DrawData} */ (
    jspb.Message.getWrapperField(this, proto.core.ServerMessage.DrawData, 6));
};


/** @param {?proto.core.ServerMessage.DrawData|undefined} value */
proto.core.ServerMessage.prototype.setDraw = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.core.ServerMessage.prototype.clearDraw = function() {
  this.setDraw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.prototype.hasDraw = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PlayerDeadData dead = 7;
 * @return {?proto.core.ServerMessage.PlayerDeadData}
 */
proto.core.ServerMessage.prototype.getDead = function() {
  return /** @type{?proto.core.ServerMessage.PlayerDeadData} */ (
    jspb.Message.getWrapperField(this, proto.core.ServerMessage.PlayerDeadData, 7));
};


/** @param {?proto.core.ServerMessage.PlayerDeadData|undefined} value */
proto.core.ServerMessage.prototype.setDead = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.core.ServerMessage.prototype.clearDead = function() {
  this.setDead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ServerMessage.prototype.hasDead = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.PlayerCommandMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.PlayerCommandMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core.PlayerCommandMessage.displayName = 'proto.core.PlayerCommandMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.PlayerCommandMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.core.PlayerCommandMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.PlayerCommandMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.PlayerCommandMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmd: jspb.Message.getField(msg, 1),
    value: jspb.Message.getOptionalFloatingPointField(msg, 2),
    actionid: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.PlayerCommandMessage}
 */
proto.core.PlayerCommandMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.PlayerCommandMessage;
  return proto.core.PlayerCommandMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.PlayerCommandMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.PlayerCommandMessage}
 */
proto.core.PlayerCommandMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.core.CommandType} */ (reader.readEnum());
      msg.setCmd(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.PlayerCommandMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.PlayerCommandMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.PlayerCommandMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.PlayerCommandMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.core.CommandType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required CommandType cmd = 1;
 * @return {!proto.core.CommandType}
 */
proto.core.PlayerCommandMessage.prototype.getCmd = function() {
  return /** @type {!proto.core.CommandType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.core.CommandType} value */
proto.core.PlayerCommandMessage.prototype.setCmd = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.core.PlayerCommandMessage.prototype.clearCmd = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.PlayerCommandMessage.prototype.hasCmd = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.core.PlayerCommandMessage.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.core.PlayerCommandMessage.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.core.PlayerCommandMessage.prototype.clearValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.PlayerCommandMessage.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 actionId = 5;
 * @return {number}
 */
proto.core.PlayerCommandMessage.prototype.getActionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.core.PlayerCommandMessage.prototype.setActionid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.core.PlayerCommandMessage.prototype.clearActionid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.PlayerCommandMessage.prototype.hasActionid = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.core.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core.ClientMessage.displayName = 'proto.core.ClientMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.core.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    typ: jspb.Message.getField(msg, 1),
    cmd: (f = msg.getCmd()) && proto.core.PlayerCommandMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.ClientMessage}
 */
proto.core.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.ClientMessage;
  return proto.core.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.ClientMessage}
 */
proto.core.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.core.MessageType} */ (reader.readEnum());
      msg.setTyp(value);
      break;
    case 2:
      var value = new proto.core.PlayerCommandMessage;
      reader.readMessage(value,proto.core.PlayerCommandMessage.deserializeBinaryFromReader);
      msg.setCmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.core.MessageType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCmd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.core.PlayerCommandMessage.serializeBinaryToWriter
    );
  }
};


/**
 * required MessageType typ = 1;
 * @return {!proto.core.MessageType}
 */
proto.core.ClientMessage.prototype.getTyp = function() {
  return /** @type {!proto.core.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.core.MessageType} value */
proto.core.ClientMessage.prototype.setTyp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.core.ClientMessage.prototype.clearTyp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ClientMessage.prototype.hasTyp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required PlayerCommandMessage cmd = 2;
 * @return {!proto.core.PlayerCommandMessage}
 */
proto.core.ClientMessage.prototype.getCmd = function() {
  return /** @type{!proto.core.PlayerCommandMessage} */ (
    jspb.Message.getWrapperField(this, proto.core.PlayerCommandMessage, 2, 1));
};


/** @param {!proto.core.PlayerCommandMessage} value */
proto.core.ClientMessage.prototype.setCmd = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.core.ClientMessage.prototype.clearCmd = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.core.ClientMessage.prototype.hasCmd = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.core.ClientMessages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.core.ClientMessages.repeatedFields_, null);
};
goog.inherits(proto.core.ClientMessages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.core.ClientMessages.displayName = 'proto.core.ClientMessages';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.core.ClientMessages.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.core.ClientMessages.prototype.toObject = function(opt_includeInstance) {
  return proto.core.ClientMessages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.core.ClientMessages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ClientMessages.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.core.ClientMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.core.ClientMessages}
 */
proto.core.ClientMessages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.core.ClientMessages;
  return proto.core.ClientMessages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.core.ClientMessages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.core.ClientMessages}
 */
proto.core.ClientMessages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.core.ClientMessage;
      reader.readMessage(value,proto.core.ClientMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.core.ClientMessages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.core.ClientMessages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.core.ClientMessages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.core.ClientMessages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.core.ClientMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ClientMessage messages = 1;
 * @return {!Array.<!proto.core.ClientMessage>}
 */
proto.core.ClientMessages.prototype.getMessagesList = function() {
  return /** @type{!Array.<!proto.core.ClientMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.core.ClientMessage, 1));
};


/** @param {!Array.<!proto.core.ClientMessage>} value */
proto.core.ClientMessages.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.core.ClientMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.core.ClientMessage}
 */
proto.core.ClientMessages.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.core.ClientMessage, opt_index);
};


proto.core.ClientMessages.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};


/**
 * @enum {number}
 */
proto.core.ForceType = {
  NOFORCETYPE: 0,
  THRUSTFORCE: 1,
  COLLISIONFORCE: 2,
  GRAVITATION: 3,
  INITIALFORCE: 4
};

/**
 * @enum {number}
 */
proto.core.SpriteType = {
  NOSPRITETYPE: 0,
  SHIP: 65536,
  LARGEASTEROID: 131072,
  SMALLASTEROID: 196608,
  BULLET: 262144,
  BLACKHOLE: 327680,
  STAR: 393216,
  PRIZESPRITE: 458752,
  PLANET: 524288
};

/**
 * @enum {number}
 */
proto.core.SpriteStatus = {
  NOSPRITESTATUS: 0,
  SHIELDACTIVE: 1,
  JETSON: 2,
  PHANTOMMODE: 3
};

/**
 * @enum {number}
 */
proto.core.MessageType = {
  NOMESSAGETYPE: 0,
  PHYSICSUPDATE: 1,
  PLAYERUPDATE: 2,
  PLAYSOUND: 3,
  FREEZEDRAWING: 4,
  DRAWMESSAGE: 5,
  PLAYERCOMMAND: 6,
  PLAYERINITIALIZE: 7,
  PLAYERDEAD: 8
};

/**
 * @enum {number}
 */
proto.core.SoundType = {
  NOSOUNDTYPE: 0,
  EXPLOSIONSOUND: 1,
  BOINGSOUND: 2,
  BLOOPSOUND: 3
};

/**
 * @enum {number}
 */
proto.core.PlayerResourceType = {
  NOPLAYERRESOURCETYPE: 0,
  LIFEENERGYRESOURCE: 1,
  SHIELDRESOURCE: 2,
  HYPERSPACERESOURCE: 3,
  BOOSTERRESOURCE: 4,
  CLOAKRESOURCE: 5,
  TRACTORRESOURCE: 6
};

/**
 * @enum {number}
 */
proto.core.CommandType = {
  NOCOMMANDTYPE: 0,
  ROTATE: 1,
  THRUST: 2,
  FIRE: 3,
  SHIELDON: 4,
  SHIELDOFF: 5,
  BOOSTER: 6,
  PHASER: 7,
  HYPERSPACE: 8,
  CLOAK: 9,
  SETBULLETSPEED: 10,
  SETBLACKHOLEMASS: 11,
  TRACTORON: 12,
  TRACTOROFF: 13
};

goog.object.extend(exports, proto.core);
