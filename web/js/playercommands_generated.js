// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var messages = messages || {};

/**
 * @enum
 */
messages.ForceType = {
  NoForceType: 0,
  ThrustForce: 1,
  CollisionForce: 2,
  Gravitation: 3,
  InitialForce: 4
};

/**
 * @enum
 */
messages.CommandType = {
  NoCommandType: 0,
  Rotate: 1,
  Thrust: 2,
  Fire: 3,
  ShieldOn: 4,
  ShieldOff: 5,
  Boost: 6,
  Phaser: 7,
  Hyperspace: 8,
  CloakShip: 9,
  SetBulletSpeed: 10,
  SetBlackholeMass: 11,
  TractorOn: 12,
  TractorOff: 13
};

/**
 * @constructor
 */
messages.PlayerCommandMessage = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {messages.PlayerCommandMessage}
 */
messages.PlayerCommandMessage.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {messages.PlayerCommandMessage=} obj
 * @returns {messages.PlayerCommandMessage}
 */
messages.PlayerCommandMessage.getRootAsPlayerCommandMessage = function(bb, obj) {
  return (obj || new messages.PlayerCommandMessage).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {messages.CommandType}
 */
messages.PlayerCommandMessage.prototype.cmd = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {messages.CommandType} */ (this.bb.readInt8(this.bb_pos + offset)) : messages.CommandType.NoCommandType;
};

/**
 * @returns {number}
 */
messages.PlayerCommandMessage.prototype.value = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
messages.PlayerCommandMessage.prototype.actionId = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
messages.PlayerCommandMessage.startPlayerCommandMessage = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {messages.CommandType} cmd
 */
messages.PlayerCommandMessage.addCmd = function(builder, cmd) {
  builder.addFieldInt8(0, cmd, messages.CommandType.NoCommandType);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} value
 */
messages.PlayerCommandMessage.addValue = function(builder, value) {
  builder.addFieldFloat64(1, value, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} actionId
 */
messages.PlayerCommandMessage.addActionId = function(builder, actionId) {
  builder.addFieldInt32(2, actionId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
messages.PlayerCommandMessage.endPlayerCommandMessage = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
messages.ClientMessage = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {messages.ClientMessage}
 */
messages.ClientMessage.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {messages.ClientMessage=} obj
 * @returns {messages.ClientMessage}
 */
messages.ClientMessage.getRootAsClientMessage = function(bb, obj) {
  return (obj || new messages.ClientMessage).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {messages.PlayerCommandMessage=} obj
 * @returns {messages.PlayerCommandMessage}
 */
messages.ClientMessage.prototype.messages = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new messages.PlayerCommandMessage).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
messages.ClientMessage.prototype.messagesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
messages.ClientMessage.startClientMessage = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} messagesOffset
 */
messages.ClientMessage.addMessages = function(builder, messagesOffset) {
  builder.addFieldOffset(0, messagesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
messages.ClientMessage.createMessagesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
messages.ClientMessage.startMessagesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
messages.ClientMessage.endClientMessage = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
messages.ClientMessage.finishClientMessageBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.messages = messages;
