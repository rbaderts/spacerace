// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/messages.proto

/*
	Package core is a generated protocol buffer package.

	It is generated from these files:
		core/messages.proto

	It has these top-level messages:
		Property
		SpriteState
		PlayerState
		ServerMessage
		PlayerCommandMessage
		ClientMessage
		ClientMessages
*/
package core

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ForceType int32

const (
	NoForceType    ForceType = 0
	ThrustForce    ForceType = 1
	CollisionForce ForceType = 2
	Gravitation    ForceType = 3
	InitialForce   ForceType = 4
)

var ForceType_name = map[int32]string{
	0: "NoForceType",
	1: "ThrustForce",
	2: "CollisionForce",
	3: "Gravitation",
	4: "InitialForce",
}
var ForceType_value = map[string]int32{
	"NoForceType":    0,
	"ThrustForce":    1,
	"CollisionForce": 2,
	"Gravitation":    3,
	"InitialForce":   4,
}

func (x ForceType) Enum() *ForceType {
	p := new(ForceType)
	*p = x
	return p
}
func (x ForceType) String() string {
	return proto.EnumName(ForceType_name, int32(x))
}
func (x *ForceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ForceType_value, data, "ForceType")
	if err != nil {
		return err
	}
	*x = ForceType(value)
	return nil
}
func (ForceType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessages, []int{0} }

type SpriteType int32

const (
	NoSpriteType  SpriteType = 0
	Ship          SpriteType = 65536
	LargeAsteroid SpriteType = 131072
	SmallAsteroid SpriteType = 196608
	Bullet        SpriteType = 262144
	Blackhole     SpriteType = 327680
	Star          SpriteType = 393216
	PrizeSprite   SpriteType = 458752
	Planet        SpriteType = 524288
)

var SpriteType_name = map[int32]string{
	0:      "NoSpriteType",
	65536:  "Ship",
	131072: "LargeAsteroid",
	196608: "SmallAsteroid",
	262144: "Bullet",
	327680: "Blackhole",
	393216: "Star",
	458752: "PrizeSprite",
	524288: "Planet",
}
var SpriteType_value = map[string]int32{
	"NoSpriteType":  0,
	"Ship":          65536,
	"LargeAsteroid": 131072,
	"SmallAsteroid": 196608,
	"Bullet":        262144,
	"Blackhole":     327680,
	"Star":          393216,
	"PrizeSprite":   458752,
	"Planet":        524288,
}

func (x SpriteType) Enum() *SpriteType {
	p := new(SpriteType)
	*p = x
	return p
}
func (x SpriteType) String() string {
	return proto.EnumName(SpriteType_name, int32(x))
}
func (x *SpriteType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SpriteType_value, data, "SpriteType")
	if err != nil {
		return err
	}
	*x = SpriteType(value)
	return nil
}
func (SpriteType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessages, []int{1} }

type SpriteStatus int32

const (
	NoSpriteStatus SpriteStatus = 0
	ShieldActive   SpriteStatus = 1
	JetsOn         SpriteStatus = 2
	PhantomMode    SpriteStatus = 3
)

var SpriteStatus_name = map[int32]string{
	0: "NoSpriteStatus",
	1: "ShieldActive",
	2: "JetsOn",
	3: "PhantomMode",
}
var SpriteStatus_value = map[string]int32{
	"NoSpriteStatus": 0,
	"ShieldActive":   1,
	"JetsOn":         2,
	"PhantomMode":    3,
}

func (x SpriteStatus) Enum() *SpriteStatus {
	p := new(SpriteStatus)
	*p = x
	return p
}
func (x SpriteStatus) String() string {
	return proto.EnumName(SpriteStatus_name, int32(x))
}
func (x *SpriteStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SpriteStatus_value, data, "SpriteStatus")
	if err != nil {
		return err
	}
	*x = SpriteStatus(value)
	return nil
}
func (SpriteStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessages, []int{2} }

type MessageType int32

const (
	NoMessageType    MessageType = 0
	PhysicsUpdate    MessageType = 1
	PlayerUpdate     MessageType = 2
	PlaySound        MessageType = 3
	FreezeDrawing    MessageType = 4
	DrawMessage      MessageType = 5
	PlayerCommand    MessageType = 6
	PlayerInitialize MessageType = 7
	PlayerDead       MessageType = 8
)

var MessageType_name = map[int32]string{
	0: "NoMessageType",
	1: "PhysicsUpdate",
	2: "PlayerUpdate",
	3: "PlaySound",
	4: "FreezeDrawing",
	5: "DrawMessage",
	6: "PlayerCommand",
	7: "PlayerInitialize",
	8: "PlayerDead",
}
var MessageType_value = map[string]int32{
	"NoMessageType":    0,
	"PhysicsUpdate":    1,
	"PlayerUpdate":     2,
	"PlaySound":        3,
	"FreezeDrawing":    4,
	"DrawMessage":      5,
	"PlayerCommand":    6,
	"PlayerInitialize": 7,
	"PlayerDead":       8,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}
func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessages, []int{3} }

type SoundType int32

const (
	NoSoundType    SoundType = 0
	ExplosionSound SoundType = 1
	BoingSound     SoundType = 2
	BloopSound     SoundType = 3
)

var SoundType_name = map[int32]string{
	0: "NoSoundType",
	1: "ExplosionSound",
	2: "BoingSound",
	3: "BloopSound",
}
var SoundType_value = map[string]int32{
	"NoSoundType":    0,
	"ExplosionSound": 1,
	"BoingSound":     2,
	"BloopSound":     3,
}

func (x SoundType) Enum() *SoundType {
	p := new(SoundType)
	*p = x
	return p
}
func (x SoundType) String() string {
	return proto.EnumName(SoundType_name, int32(x))
}
func (x *SoundType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SoundType_value, data, "SoundType")
	if err != nil {
		return err
	}
	*x = SoundType(value)
	return nil
}
func (SoundType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessages, []int{4} }

type PlayerResourceType int32

const (
	NoPlayerResourceType PlayerResourceType = 0
	LifeEnergyResource   PlayerResourceType = 1
	ShieldResource       PlayerResourceType = 2
	HyperspaceResource   PlayerResourceType = 3
	BoosterResource      PlayerResourceType = 4
	CloakResource        PlayerResourceType = 5
	TractorResource      PlayerResourceType = 6
)

var PlayerResourceType_name = map[int32]string{
	0: "NoPlayerResourceType",
	1: "LifeEnergyResource",
	2: "ShieldResource",
	3: "HyperspaceResource",
	4: "BoosterResource",
	5: "CloakResource",
	6: "TractorResource",
}
var PlayerResourceType_value = map[string]int32{
	"NoPlayerResourceType": 0,
	"LifeEnergyResource":   1,
	"ShieldResource":       2,
	"HyperspaceResource":   3,
	"BoosterResource":      4,
	"CloakResource":        5,
	"TractorResource":      6,
}

func (x PlayerResourceType) Enum() *PlayerResourceType {
	p := new(PlayerResourceType)
	*p = x
	return p
}
func (x PlayerResourceType) String() string {
	return proto.EnumName(PlayerResourceType_name, int32(x))
}
func (x *PlayerResourceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PlayerResourceType_value, data, "PlayerResourceType")
	if err != nil {
		return err
	}
	*x = PlayerResourceType(value)
	return nil
}
func (PlayerResourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessages, []int{5} }

type CommandType int32

const (
	NoCommandType    CommandType = 0
	Rotate           CommandType = 1
	Thrust           CommandType = 2
	Fire             CommandType = 3
	ShieldOn         CommandType = 4
	ShieldOff        CommandType = 5
	Booster          CommandType = 6
	Phaser           CommandType = 7
	Hyperspace       CommandType = 8
	Cloak            CommandType = 9
	SetBulletSpeed   CommandType = 10
	SetBlackholeMass CommandType = 11
	TractorOn        CommandType = 12
	TractorOff       CommandType = 13
)

var CommandType_name = map[int32]string{
	0:  "NoCommandType",
	1:  "Rotate",
	2:  "Thrust",
	3:  "Fire",
	4:  "ShieldOn",
	5:  "ShieldOff",
	6:  "Booster",
	7:  "Phaser",
	8:  "Hyperspace",
	9:  "Cloak",
	10: "SetBulletSpeed",
	11: "SetBlackholeMass",
	12: "TractorOn",
	13: "TractorOff",
}
var CommandType_value = map[string]int32{
	"NoCommandType":    0,
	"Rotate":           1,
	"Thrust":           2,
	"Fire":             3,
	"ShieldOn":         4,
	"ShieldOff":        5,
	"Booster":          6,
	"Phaser":           7,
	"Hyperspace":       8,
	"Cloak":            9,
	"SetBulletSpeed":   10,
	"SetBlackholeMass": 11,
	"TractorOn":        12,
	"TractorOff":       13,
}

func (x CommandType) Enum() *CommandType {
	p := new(CommandType)
	*p = x
	return p
}
func (x CommandType) String() string {
	return proto.EnumName(CommandType_name, int32(x))
}
func (x *CommandType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CommandType_value, data, "CommandType")
	if err != nil {
		return err
	}
	*x = CommandType(value)
	return nil
}
func (CommandType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessages, []int{6} }

type Property struct {
	Resource         string `protobuf:"bytes,1,req,name=resource" json:"resource"`
	Value            string `protobuf:"bytes,2,req,name=value" json:"value"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Property) Reset()                    { *m = Property{} }
func (*Property) ProtoMessage()               {}
func (*Property) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{0} }

type SpriteState struct {
	Id               int32   `protobuf:"varint,1,req,name=id" json:"id"`
	Typ              uint32  `protobuf:"varint,2,req,name=typ" json:"typ"`
	X                float64 `protobuf:"fixed64,3,req,name=x" json:"x"`
	Y                float64 `protobuf:"fixed64,4,req,name=y" json:"y"`
	Vx               float64 `protobuf:"fixed64,5,req,name=vx" json:"vx"`
	Vy               float64 `protobuf:"fixed64,6,req,name=vy" json:"vy"`
	Height           int32   `protobuf:"varint,7,req,name=height" json:"height"`
	Width            int32   `protobuf:"varint,8,req,name=width" json:"width"`
	Rotation         float64 `protobuf:"fixed64,9,req,name=rotation" json:"rotation"`
	Mass             float64 `protobuf:"fixed64,10,req,name=mass" json:"mass"`
	PlayerId         int32   `protobuf:"varint,11,req,name=playerId" json:"playerId"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SpriteState) Reset()                    { *m = SpriteState{} }
func (*SpriteState) ProtoMessage()               {}
func (*SpriteState) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{1} }

type PlayerState struct {
	Id               int32                    `protobuf:"varint,1,req,name=id" json:"id"`
	Name             string                   `protobuf:"bytes,2,req,name=name" json:"name"`
	ShipId           int32                    `protobuf:"varint,3,req,name=shipId" json:"shipId"`
	Inventory        []*PlayerState_Inventory `protobuf:"bytes,4,rep,name=inventory" json:"inventory,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *PlayerState) Reset()                    { *m = PlayerState{} }
func (*PlayerState) ProtoMessage()               {}
func (*PlayerState) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{2} }

type PlayerState_Inventory struct {
	ResourceType     PlayerResourceType `protobuf:"varint,1,req,name=resourceType,enum=core.PlayerResourceType" json:"resourceType"`
	Value            int32              `protobuf:"varint,2,req,name=value" json:"value"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PlayerState_Inventory) Reset()                    { *m = PlayerState_Inventory{} }
func (*PlayerState_Inventory) ProtoMessage()               {}
func (*PlayerState_Inventory) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{2, 0} }

type ServerMessage struct {
	Typ              MessageType                         `protobuf:"varint,1,req,name=typ,enum=core.MessageType" json:"typ"`
	Update           *ServerMessage_PhysicsUpdateData    `protobuf:"bytes,2,opt,name=update" json:"update,omitempty"`
	Players          *ServerMessage_PlayerUpdateData     `protobuf:"bytes,3,opt,name=players" json:"players,omitempty"`
	Initialize       *ServerMessage_InitializePlayerData `protobuf:"bytes,4,opt,name=initialize" json:"initialize,omitempty"`
	Sound            *ServerMessage_PlaySoundData        `protobuf:"bytes,5,opt,name=sound" json:"sound,omitempty"`
	Draw             *ServerMessage_DrawData             `protobuf:"bytes,6,opt,name=draw" json:"draw,omitempty"`
	Dead             *ServerMessage_PlayerDeadData       `protobuf:"bytes,7,opt,name=dead" json:"dead,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *ServerMessage) Reset()                    { *m = ServerMessage{} }
func (*ServerMessage) ProtoMessage()               {}
func (*ServerMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{3} }

type ServerMessage_PhysicsUpdateData struct {
	TimeNanos        int64          `protobuf:"varint,1,req,name=time_nanos,json=timeNanos" json:"time_nanos"`
	Frame            int32          `protobuf:"varint,2,req,name=frame" json:"frame"`
	Actionid         int32          `protobuf:"varint,3,opt,name=actionid" json:"actionid"`
	Sprites          []*SpriteState `protobuf:"bytes,6,rep,name=sprites" json:"sprites,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ServerMessage_PhysicsUpdateData) Reset()      { *m = ServerMessage_PhysicsUpdateData{} }
func (*ServerMessage_PhysicsUpdateData) ProtoMessage() {}
func (*ServerMessage_PhysicsUpdateData) Descriptor() ([]byte, []int) {
	return fileDescriptorMessages, []int{3, 0}
}

type ServerMessage_PlayerUpdateData struct {
	Player           *PlayerState `protobuf:"bytes,1,req,name=player" json:"player,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ServerMessage_PlayerUpdateData) Reset()      { *m = ServerMessage_PlayerUpdateData{} }
func (*ServerMessage_PlayerUpdateData) ProtoMessage() {}
func (*ServerMessage_PlayerUpdateData) Descriptor() ([]byte, []int) {
	return fileDescriptorMessages, []int{3, 1}
}

type ServerMessage_InitializePlayerData struct {
	PlayerId         int32  `protobuf:"varint,1,req,name=playerId" json:"playerId"`
	ShipId           int32  `protobuf:"varint,2,req,name=shipId" json:"shipId"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ServerMessage_InitializePlayerData) Reset()      { *m = ServerMessage_InitializePlayerData{} }
func (*ServerMessage_InitializePlayerData) ProtoMessage() {}
func (*ServerMessage_InitializePlayerData) Descriptor() ([]byte, []int) {
	return fileDescriptorMessages, []int{3, 2}
}

type ServerMessage_PlaySoundData struct {
	SoundType        SoundType `protobuf:"varint,1,req,name=soundType,enum=core.SoundType" json:"soundType"`
	Volume           float64   `protobuf:"fixed64,2,opt,name=volume" json:"volume"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ServerMessage_PlaySoundData) Reset()      { *m = ServerMessage_PlaySoundData{} }
func (*ServerMessage_PlaySoundData) ProtoMessage() {}
func (*ServerMessage_PlaySoundData) Descriptor() ([]byte, []int) {
	return fileDescriptorMessages, []int{3, 3}
}

type ServerMessage_DrawData struct {
	Cmds             []string `protobuf:"bytes,1,rep,name=cmds" json:"cmds,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ServerMessage_DrawData) Reset()      { *m = ServerMessage_DrawData{} }
func (*ServerMessage_DrawData) ProtoMessage() {}
func (*ServerMessage_DrawData) Descriptor() ([]byte, []int) {
	return fileDescriptorMessages, []int{3, 4}
}

type ServerMessage_PlayerDeadData struct {
	PlayerId         int32  `protobuf:"varint,1,req,name=playerId" json:"playerId"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ServerMessage_PlayerDeadData) Reset()      { *m = ServerMessage_PlayerDeadData{} }
func (*ServerMessage_PlayerDeadData) ProtoMessage() {}
func (*ServerMessage_PlayerDeadData) Descriptor() ([]byte, []int) {
	return fileDescriptorMessages, []int{3, 5}
}

type PlayerCommandMessage struct {
	Cmd              CommandType `protobuf:"varint,1,req,name=cmd,enum=core.CommandType" json:"cmd"`
	Value            float64     `protobuf:"fixed64,2,opt,name=value" json:"value"`
	ActionId         int32       `protobuf:"varint,5,opt,name=actionId" json:"actionId"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *PlayerCommandMessage) Reset()                    { *m = PlayerCommandMessage{} }
func (*PlayerCommandMessage) ProtoMessage()               {}
func (*PlayerCommandMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{4} }

type ClientMessage struct {
	Typ              MessageType          `protobuf:"varint,1,req,name=typ,enum=core.MessageType" json:"typ"`
	Cmd              PlayerCommandMessage `protobuf:"bytes,2,req,name=cmd" json:"cmd"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *ClientMessage) Reset()                    { *m = ClientMessage{} }
func (*ClientMessage) ProtoMessage()               {}
func (*ClientMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{5} }

type ClientMessages struct {
	Messages         []*ClientMessage `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *ClientMessages) Reset()                    { *m = ClientMessages{} }
func (*ClientMessages) ProtoMessage()               {}
func (*ClientMessages) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{6} }

func init() {
	proto.RegisterType((*Property)(nil), "core.Property")
	proto.RegisterType((*SpriteState)(nil), "core.SpriteState")
	proto.RegisterType((*PlayerState)(nil), "core.PlayerState")
	proto.RegisterType((*PlayerState_Inventory)(nil), "core.PlayerState.Inventory")
	proto.RegisterType((*ServerMessage)(nil), "core.ServerMessage")
	proto.RegisterType((*ServerMessage_PhysicsUpdateData)(nil), "core.ServerMessage.PhysicsUpdateData")
	proto.RegisterType((*ServerMessage_PlayerUpdateData)(nil), "core.ServerMessage.PlayerUpdateData")
	proto.RegisterType((*ServerMessage_InitializePlayerData)(nil), "core.ServerMessage.InitializePlayerData")
	proto.RegisterType((*ServerMessage_PlaySoundData)(nil), "core.ServerMessage.PlaySoundData")
	proto.RegisterType((*ServerMessage_DrawData)(nil), "core.ServerMessage.DrawData")
	proto.RegisterType((*ServerMessage_PlayerDeadData)(nil), "core.ServerMessage.PlayerDeadData")
	proto.RegisterType((*PlayerCommandMessage)(nil), "core.PlayerCommandMessage")
	proto.RegisterType((*ClientMessage)(nil), "core.ClientMessage")
	proto.RegisterType((*ClientMessages)(nil), "core.ClientMessages")
	proto.RegisterEnum("core.ForceType", ForceType_name, ForceType_value)
	proto.RegisterEnum("core.SpriteType", SpriteType_name, SpriteType_value)
	proto.RegisterEnum("core.SpriteStatus", SpriteStatus_name, SpriteStatus_value)
	proto.RegisterEnum("core.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("core.SoundType", SoundType_name, SoundType_value)
	proto.RegisterEnum("core.PlayerResourceType", PlayerResourceType_name, PlayerResourceType_value)
	proto.RegisterEnum("core.CommandType", CommandType_name, CommandType_value)
}
func (this *Property) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Property)
	if !ok {
		that2, ok := that.(Property)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Property")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Property but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Property but is not nil && this == nil")
	}
	if this.Resource != that1.Resource {
		return fmt.Errorf("Resource this(%v) Not Equal that(%v)", this.Resource, that1.Resource)
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Property) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Property)
	if !ok {
		that2, ok := that.(Property)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Resource != that1.Resource {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SpriteState) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SpriteState)
	if !ok {
		that2, ok := that.(SpriteState)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SpriteState")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SpriteState but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SpriteState but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Typ != that1.Typ {
		return fmt.Errorf("Typ this(%v) Not Equal that(%v)", this.Typ, that1.Typ)
	}
	if this.X != that1.X {
		return fmt.Errorf("X this(%v) Not Equal that(%v)", this.X, that1.X)
	}
	if this.Y != that1.Y {
		return fmt.Errorf("Y this(%v) Not Equal that(%v)", this.Y, that1.Y)
	}
	if this.Vx != that1.Vx {
		return fmt.Errorf("Vx this(%v) Not Equal that(%v)", this.Vx, that1.Vx)
	}
	if this.Vy != that1.Vy {
		return fmt.Errorf("Vy this(%v) Not Equal that(%v)", this.Vy, that1.Vy)
	}
	if this.Height != that1.Height {
		return fmt.Errorf("Height this(%v) Not Equal that(%v)", this.Height, that1.Height)
	}
	if this.Width != that1.Width {
		return fmt.Errorf("Width this(%v) Not Equal that(%v)", this.Width, that1.Width)
	}
	if this.Rotation != that1.Rotation {
		return fmt.Errorf("Rotation this(%v) Not Equal that(%v)", this.Rotation, that1.Rotation)
	}
	if this.Mass != that1.Mass {
		return fmt.Errorf("Mass this(%v) Not Equal that(%v)", this.Mass, that1.Mass)
	}
	if this.PlayerId != that1.PlayerId {
		return fmt.Errorf("PlayerId this(%v) Not Equal that(%v)", this.PlayerId, that1.PlayerId)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SpriteState) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SpriteState)
	if !ok {
		that2, ok := that.(SpriteState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	if this.Vx != that1.Vx {
		return false
	}
	if this.Vy != that1.Vy {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Rotation != that1.Rotation {
		return false
	}
	if this.Mass != that1.Mass {
		return false
	}
	if this.PlayerId != that1.PlayerId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PlayerState) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PlayerState)
	if !ok {
		that2, ok := that.(PlayerState)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PlayerState")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PlayerState but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PlayerState but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.ShipId != that1.ShipId {
		return fmt.Errorf("ShipId this(%v) Not Equal that(%v)", this.ShipId, that1.ShipId)
	}
	if len(this.Inventory) != len(that1.Inventory) {
		return fmt.Errorf("Inventory this(%v) Not Equal that(%v)", len(this.Inventory), len(that1.Inventory))
	}
	for i := range this.Inventory {
		if !this.Inventory[i].Equal(that1.Inventory[i]) {
			return fmt.Errorf("Inventory this[%v](%v) Not Equal that[%v](%v)", i, this.Inventory[i], i, that1.Inventory[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PlayerState) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PlayerState)
	if !ok {
		that2, ok := that.(PlayerState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ShipId != that1.ShipId {
		return false
	}
	if len(this.Inventory) != len(that1.Inventory) {
		return false
	}
	for i := range this.Inventory {
		if !this.Inventory[i].Equal(that1.Inventory[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PlayerState_Inventory) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PlayerState_Inventory)
	if !ok {
		that2, ok := that.(PlayerState_Inventory)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PlayerState_Inventory")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PlayerState_Inventory but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PlayerState_Inventory but is not nil && this == nil")
	}
	if this.ResourceType != that1.ResourceType {
		return fmt.Errorf("ResourceType this(%v) Not Equal that(%v)", this.ResourceType, that1.ResourceType)
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PlayerState_Inventory) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PlayerState_Inventory)
	if !ok {
		that2, ok := that.(PlayerState_Inventory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ResourceType != that1.ResourceType {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServerMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ServerMessage)
	if !ok {
		that2, ok := that.(ServerMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ServerMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ServerMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ServerMessage but is not nil && this == nil")
	}
	if this.Typ != that1.Typ {
		return fmt.Errorf("Typ this(%v) Not Equal that(%v)", this.Typ, that1.Typ)
	}
	if !this.Update.Equal(that1.Update) {
		return fmt.Errorf("Update this(%v) Not Equal that(%v)", this.Update, that1.Update)
	}
	if !this.Players.Equal(that1.Players) {
		return fmt.Errorf("Players this(%v) Not Equal that(%v)", this.Players, that1.Players)
	}
	if !this.Initialize.Equal(that1.Initialize) {
		return fmt.Errorf("Initialize this(%v) Not Equal that(%v)", this.Initialize, that1.Initialize)
	}
	if !this.Sound.Equal(that1.Sound) {
		return fmt.Errorf("Sound this(%v) Not Equal that(%v)", this.Sound, that1.Sound)
	}
	if !this.Draw.Equal(that1.Draw) {
		return fmt.Errorf("Draw this(%v) Not Equal that(%v)", this.Draw, that1.Draw)
	}
	if !this.Dead.Equal(that1.Dead) {
		return fmt.Errorf("Dead this(%v) Not Equal that(%v)", this.Dead, that1.Dead)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ServerMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerMessage)
	if !ok {
		that2, ok := that.(ServerMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if !this.Update.Equal(that1.Update) {
		return false
	}
	if !this.Players.Equal(that1.Players) {
		return false
	}
	if !this.Initialize.Equal(that1.Initialize) {
		return false
	}
	if !this.Sound.Equal(that1.Sound) {
		return false
	}
	if !this.Draw.Equal(that1.Draw) {
		return false
	}
	if !this.Dead.Equal(that1.Dead) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServerMessage_PhysicsUpdateData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ServerMessage_PhysicsUpdateData)
	if !ok {
		that2, ok := that.(ServerMessage_PhysicsUpdateData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ServerMessage_PhysicsUpdateData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ServerMessage_PhysicsUpdateData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ServerMessage_PhysicsUpdateData but is not nil && this == nil")
	}
	if this.TimeNanos != that1.TimeNanos {
		return fmt.Errorf("TimeNanos this(%v) Not Equal that(%v)", this.TimeNanos, that1.TimeNanos)
	}
	if this.Frame != that1.Frame {
		return fmt.Errorf("Frame this(%v) Not Equal that(%v)", this.Frame, that1.Frame)
	}
	if this.Actionid != that1.Actionid {
		return fmt.Errorf("Actionid this(%v) Not Equal that(%v)", this.Actionid, that1.Actionid)
	}
	if len(this.Sprites) != len(that1.Sprites) {
		return fmt.Errorf("Sprites this(%v) Not Equal that(%v)", len(this.Sprites), len(that1.Sprites))
	}
	for i := range this.Sprites {
		if !this.Sprites[i].Equal(that1.Sprites[i]) {
			return fmt.Errorf("Sprites this[%v](%v) Not Equal that[%v](%v)", i, this.Sprites[i], i, that1.Sprites[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ServerMessage_PhysicsUpdateData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerMessage_PhysicsUpdateData)
	if !ok {
		that2, ok := that.(ServerMessage_PhysicsUpdateData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TimeNanos != that1.TimeNanos {
		return false
	}
	if this.Frame != that1.Frame {
		return false
	}
	if this.Actionid != that1.Actionid {
		return false
	}
	if len(this.Sprites) != len(that1.Sprites) {
		return false
	}
	for i := range this.Sprites {
		if !this.Sprites[i].Equal(that1.Sprites[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServerMessage_PlayerUpdateData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ServerMessage_PlayerUpdateData)
	if !ok {
		that2, ok := that.(ServerMessage_PlayerUpdateData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ServerMessage_PlayerUpdateData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ServerMessage_PlayerUpdateData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ServerMessage_PlayerUpdateData but is not nil && this == nil")
	}
	if !this.Player.Equal(that1.Player) {
		return fmt.Errorf("Player this(%v) Not Equal that(%v)", this.Player, that1.Player)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ServerMessage_PlayerUpdateData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerMessage_PlayerUpdateData)
	if !ok {
		that2, ok := that.(ServerMessage_PlayerUpdateData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Player.Equal(that1.Player) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServerMessage_InitializePlayerData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ServerMessage_InitializePlayerData)
	if !ok {
		that2, ok := that.(ServerMessage_InitializePlayerData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ServerMessage_InitializePlayerData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ServerMessage_InitializePlayerData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ServerMessage_InitializePlayerData but is not nil && this == nil")
	}
	if this.PlayerId != that1.PlayerId {
		return fmt.Errorf("PlayerId this(%v) Not Equal that(%v)", this.PlayerId, that1.PlayerId)
	}
	if this.ShipId != that1.ShipId {
		return fmt.Errorf("ShipId this(%v) Not Equal that(%v)", this.ShipId, that1.ShipId)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ServerMessage_InitializePlayerData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerMessage_InitializePlayerData)
	if !ok {
		that2, ok := that.(ServerMessage_InitializePlayerData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PlayerId != that1.PlayerId {
		return false
	}
	if this.ShipId != that1.ShipId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServerMessage_PlaySoundData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ServerMessage_PlaySoundData)
	if !ok {
		that2, ok := that.(ServerMessage_PlaySoundData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ServerMessage_PlaySoundData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ServerMessage_PlaySoundData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ServerMessage_PlaySoundData but is not nil && this == nil")
	}
	if this.SoundType != that1.SoundType {
		return fmt.Errorf("SoundType this(%v) Not Equal that(%v)", this.SoundType, that1.SoundType)
	}
	if this.Volume != that1.Volume {
		return fmt.Errorf("Volume this(%v) Not Equal that(%v)", this.Volume, that1.Volume)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ServerMessage_PlaySoundData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerMessage_PlaySoundData)
	if !ok {
		that2, ok := that.(ServerMessage_PlaySoundData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SoundType != that1.SoundType {
		return false
	}
	if this.Volume != that1.Volume {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServerMessage_DrawData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ServerMessage_DrawData)
	if !ok {
		that2, ok := that.(ServerMessage_DrawData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ServerMessage_DrawData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ServerMessage_DrawData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ServerMessage_DrawData but is not nil && this == nil")
	}
	if len(this.Cmds) != len(that1.Cmds) {
		return fmt.Errorf("Cmds this(%v) Not Equal that(%v)", len(this.Cmds), len(that1.Cmds))
	}
	for i := range this.Cmds {
		if this.Cmds[i] != that1.Cmds[i] {
			return fmt.Errorf("Cmds this[%v](%v) Not Equal that[%v](%v)", i, this.Cmds[i], i, that1.Cmds[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ServerMessage_DrawData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerMessage_DrawData)
	if !ok {
		that2, ok := that.(ServerMessage_DrawData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Cmds) != len(that1.Cmds) {
		return false
	}
	for i := range this.Cmds {
		if this.Cmds[i] != that1.Cmds[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServerMessage_PlayerDeadData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ServerMessage_PlayerDeadData)
	if !ok {
		that2, ok := that.(ServerMessage_PlayerDeadData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ServerMessage_PlayerDeadData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ServerMessage_PlayerDeadData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ServerMessage_PlayerDeadData but is not nil && this == nil")
	}
	if this.PlayerId != that1.PlayerId {
		return fmt.Errorf("PlayerId this(%v) Not Equal that(%v)", this.PlayerId, that1.PlayerId)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ServerMessage_PlayerDeadData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerMessage_PlayerDeadData)
	if !ok {
		that2, ok := that.(ServerMessage_PlayerDeadData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PlayerId != that1.PlayerId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PlayerCommandMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PlayerCommandMessage)
	if !ok {
		that2, ok := that.(PlayerCommandMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PlayerCommandMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PlayerCommandMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PlayerCommandMessage but is not nil && this == nil")
	}
	if this.Cmd != that1.Cmd {
		return fmt.Errorf("Cmd this(%v) Not Equal that(%v)", this.Cmd, that1.Cmd)
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	if this.ActionId != that1.ActionId {
		return fmt.Errorf("ActionId this(%v) Not Equal that(%v)", this.ActionId, that1.ActionId)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PlayerCommandMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PlayerCommandMessage)
	if !ok {
		that2, ok := that.(PlayerCommandMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Cmd != that1.Cmd {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.ActionId != that1.ActionId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ClientMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ClientMessage)
	if !ok {
		that2, ok := that.(ClientMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ClientMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ClientMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ClientMessage but is not nil && this == nil")
	}
	if this.Typ != that1.Typ {
		return fmt.Errorf("Typ this(%v) Not Equal that(%v)", this.Typ, that1.Typ)
	}
	if !this.Cmd.Equal(&that1.Cmd) {
		return fmt.Errorf("Cmd this(%v) Not Equal that(%v)", this.Cmd, that1.Cmd)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ClientMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ClientMessage)
	if !ok {
		that2, ok := that.(ClientMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if !this.Cmd.Equal(&that1.Cmd) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ClientMessages) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ClientMessages)
	if !ok {
		that2, ok := that.(ClientMessages)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ClientMessages")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ClientMessages but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ClientMessages but is not nil && this == nil")
	}
	if len(this.Messages) != len(that1.Messages) {
		return fmt.Errorf("Messages this(%v) Not Equal that(%v)", len(this.Messages), len(that1.Messages))
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return fmt.Errorf("Messages this[%v](%v) Not Equal that[%v](%v)", i, this.Messages[i], i, that1.Messages[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ClientMessages) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ClientMessages)
	if !ok {
		that2, ok := that.(ClientMessages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Property) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.Property{")
	s = append(s, "Resource: "+fmt.Sprintf("%#v", this.Resource)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpriteState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&core.SpriteState{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Typ: "+fmt.Sprintf("%#v", this.Typ)+",\n")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "Vx: "+fmt.Sprintf("%#v", this.Vx)+",\n")
	s = append(s, "Vy: "+fmt.Sprintf("%#v", this.Vy)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Rotation: "+fmt.Sprintf("%#v", this.Rotation)+",\n")
	s = append(s, "Mass: "+fmt.Sprintf("%#v", this.Mass)+",\n")
	s = append(s, "PlayerId: "+fmt.Sprintf("%#v", this.PlayerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlayerState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&core.PlayerState{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ShipId: "+fmt.Sprintf("%#v", this.ShipId)+",\n")
	if this.Inventory != nil {
		s = append(s, "Inventory: "+fmt.Sprintf("%#v", this.Inventory)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlayerState_Inventory) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.PlayerState_Inventory{")
	s = append(s, "ResourceType: "+fmt.Sprintf("%#v", this.ResourceType)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&core.ServerMessage{")
	s = append(s, "Typ: "+fmt.Sprintf("%#v", this.Typ)+",\n")
	if this.Update != nil {
		s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	}
	if this.Players != nil {
		s = append(s, "Players: "+fmt.Sprintf("%#v", this.Players)+",\n")
	}
	if this.Initialize != nil {
		s = append(s, "Initialize: "+fmt.Sprintf("%#v", this.Initialize)+",\n")
	}
	if this.Sound != nil {
		s = append(s, "Sound: "+fmt.Sprintf("%#v", this.Sound)+",\n")
	}
	if this.Draw != nil {
		s = append(s, "Draw: "+fmt.Sprintf("%#v", this.Draw)+",\n")
	}
	if this.Dead != nil {
		s = append(s, "Dead: "+fmt.Sprintf("%#v", this.Dead)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerMessage_PhysicsUpdateData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&core.ServerMessage_PhysicsUpdateData{")
	s = append(s, "TimeNanos: "+fmt.Sprintf("%#v", this.TimeNanos)+",\n")
	s = append(s, "Frame: "+fmt.Sprintf("%#v", this.Frame)+",\n")
	s = append(s, "Actionid: "+fmt.Sprintf("%#v", this.Actionid)+",\n")
	if this.Sprites != nil {
		s = append(s, "Sprites: "+fmt.Sprintf("%#v", this.Sprites)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerMessage_PlayerUpdateData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.ServerMessage_PlayerUpdateData{")
	if this.Player != nil {
		s = append(s, "Player: "+fmt.Sprintf("%#v", this.Player)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerMessage_InitializePlayerData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.ServerMessage_InitializePlayerData{")
	s = append(s, "PlayerId: "+fmt.Sprintf("%#v", this.PlayerId)+",\n")
	s = append(s, "ShipId: "+fmt.Sprintf("%#v", this.ShipId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerMessage_PlaySoundData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.ServerMessage_PlaySoundData{")
	s = append(s, "SoundType: "+fmt.Sprintf("%#v", this.SoundType)+",\n")
	s = append(s, "Volume: "+fmt.Sprintf("%#v", this.Volume)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerMessage_DrawData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.ServerMessage_DrawData{")
	if this.Cmds != nil {
		s = append(s, "Cmds: "+fmt.Sprintf("%#v", this.Cmds)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerMessage_PlayerDeadData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.ServerMessage_PlayerDeadData{")
	s = append(s, "PlayerId: "+fmt.Sprintf("%#v", this.PlayerId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlayerCommandMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&core.PlayerCommandMessage{")
	s = append(s, "Cmd: "+fmt.Sprintf("%#v", this.Cmd)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "ActionId: "+fmt.Sprintf("%#v", this.ActionId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.ClientMessage{")
	s = append(s, "Typ: "+fmt.Sprintf("%#v", this.Typ)+",\n")
	s = append(s, "Cmd: "+strings.Replace(this.Cmd.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientMessages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.ClientMessages{")
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessages(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Property) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Property) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessages(dAtA, i, uint64(len(m.Resource)))
	i += copy(dAtA[i:], m.Resource)
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessages(dAtA, i, uint64(len(m.Value)))
	i += copy(dAtA[i:], m.Value)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SpriteState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpriteState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Typ))
	dAtA[i] = 0x19
	i++
	i = encodeFixed64Messages(dAtA, i, uint64(math.Float64bits(float64(m.X))))
	dAtA[i] = 0x21
	i++
	i = encodeFixed64Messages(dAtA, i, uint64(math.Float64bits(float64(m.Y))))
	dAtA[i] = 0x29
	i++
	i = encodeFixed64Messages(dAtA, i, uint64(math.Float64bits(float64(m.Vx))))
	dAtA[i] = 0x31
	i++
	i = encodeFixed64Messages(dAtA, i, uint64(math.Float64bits(float64(m.Vy))))
	dAtA[i] = 0x38
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Height))
	dAtA[i] = 0x40
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Width))
	dAtA[i] = 0x49
	i++
	i = encodeFixed64Messages(dAtA, i, uint64(math.Float64bits(float64(m.Rotation))))
	dAtA[i] = 0x51
	i++
	i = encodeFixed64Messages(dAtA, i, uint64(math.Float64bits(float64(m.Mass))))
	dAtA[i] = 0x58
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.PlayerId))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessages(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x18
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.ShipId))
	if len(m.Inventory) > 0 {
		for _, msg := range m.Inventory {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerState_Inventory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerState_Inventory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.ResourceType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Value))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Typ))
	if m.Update != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Update.Size()))
		n1, err := m.Update.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Players != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Players.Size()))
		n2, err := m.Players.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Initialize != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Initialize.Size()))
		n3, err := m.Initialize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Sound != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Sound.Size()))
		n4, err := m.Sound.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Draw != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Draw.Size()))
		n5, err := m.Draw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Dead != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Dead.Size()))
		n6, err := m.Dead.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerMessage_PhysicsUpdateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMessage_PhysicsUpdateData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.TimeNanos))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Frame))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Actionid))
	if len(m.Sprites) > 0 {
		for _, msg := range m.Sprites {
			dAtA[i] = 0x32
			i++
			i = encodeVarintMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerMessage_PlayerUpdateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMessage_PlayerUpdateData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Player == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("player")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Player.Size()))
		n7, err := m.Player.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerMessage_InitializePlayerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMessage_InitializePlayerData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.PlayerId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.ShipId))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerMessage_PlaySoundData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMessage_PlaySoundData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.SoundType))
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Messages(dAtA, i, uint64(math.Float64bits(float64(m.Volume))))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerMessage_DrawData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMessage_DrawData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cmds) > 0 {
		for _, s := range m.Cmds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerMessage_PlayerDeadData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMessage_PlayerDeadData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.PlayerId))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerCommandMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerCommandMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Cmd))
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Messages(dAtA, i, uint64(math.Float64bits(float64(m.Value))))
	dAtA[i] = 0x28
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.ActionId))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Typ))
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessages(dAtA, i, uint64(m.Cmd.Size()))
	n8, err := m.Cmd.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientMessages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Messages(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Messages(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedProperty(r randyMessages, easy bool) *Property {
	this := &Property{}
	this.Resource = string(randStringMessages(r))
	this.Value = string(randStringMessages(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 3)
	}
	return this
}

func NewPopulatedSpriteState(r randyMessages, easy bool) *SpriteState {
	this := &SpriteState{}
	this.Id = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Typ = uint32(r.Uint32())
	this.X = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.X *= -1
	}
	this.Y = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Y *= -1
	}
	this.Vx = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Vx *= -1
	}
	this.Vy = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Vy *= -1
	}
	this.Height = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Height *= -1
	}
	this.Width = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Width *= -1
	}
	this.Rotation = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Rotation *= -1
	}
	this.Mass = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Mass *= -1
	}
	this.PlayerId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PlayerId *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 12)
	}
	return this
}

func NewPopulatedPlayerState(r randyMessages, easy bool) *PlayerState {
	this := &PlayerState{}
	this.Id = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Name = string(randStringMessages(r))
	this.ShipId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ShipId *= -1
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Inventory = make([]*PlayerState_Inventory, v1)
		for i := 0; i < v1; i++ {
			this.Inventory[i] = NewPopulatedPlayerState_Inventory(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 5)
	}
	return this
}

func NewPopulatedPlayerState_Inventory(r randyMessages, easy bool) *PlayerState_Inventory {
	this := &PlayerState_Inventory{}
	this.ResourceType = PlayerResourceType([]int32{0, 1, 2, 3, 4, 5, 6}[r.Intn(7)])
	this.Value = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Value *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 3)
	}
	return this
}

func NewPopulatedServerMessage(r randyMessages, easy bool) *ServerMessage {
	this := &ServerMessage{}
	this.Typ = MessageType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8}[r.Intn(9)])
	if r.Intn(10) != 0 {
		this.Update = NewPopulatedServerMessage_PhysicsUpdateData(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Players = NewPopulatedServerMessage_PlayerUpdateData(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Initialize = NewPopulatedServerMessage_InitializePlayerData(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Sound = NewPopulatedServerMessage_PlaySoundData(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Draw = NewPopulatedServerMessage_DrawData(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Dead = NewPopulatedServerMessage_PlayerDeadData(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 8)
	}
	return this
}

func NewPopulatedServerMessage_PhysicsUpdateData(r randyMessages, easy bool) *ServerMessage_PhysicsUpdateData {
	this := &ServerMessage_PhysicsUpdateData{}
	this.TimeNanos = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.TimeNanos *= -1
	}
	this.Frame = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Frame *= -1
	}
	this.Actionid = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Actionid *= -1
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Sprites = make([]*SpriteState, v2)
		for i := 0; i < v2; i++ {
			this.Sprites[i] = NewPopulatedSpriteState(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 7)
	}
	return this
}

func NewPopulatedServerMessage_PlayerUpdateData(r randyMessages, easy bool) *ServerMessage_PlayerUpdateData {
	this := &ServerMessage_PlayerUpdateData{}
	this.Player = NewPopulatedPlayerState(r, easy)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 2)
	}
	return this
}

func NewPopulatedServerMessage_InitializePlayerData(r randyMessages, easy bool) *ServerMessage_InitializePlayerData {
	this := &ServerMessage_InitializePlayerData{}
	this.PlayerId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PlayerId *= -1
	}
	this.ShipId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ShipId *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 3)
	}
	return this
}

func NewPopulatedServerMessage_PlaySoundData(r randyMessages, easy bool) *ServerMessage_PlaySoundData {
	this := &ServerMessage_PlaySoundData{}
	this.SoundType = SoundType([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.Volume = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Volume *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 3)
	}
	return this
}

func NewPopulatedServerMessage_DrawData(r randyMessages, easy bool) *ServerMessage_DrawData {
	this := &ServerMessage_DrawData{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(10)
		this.Cmds = make([]string, v3)
		for i := 0; i < v3; i++ {
			this.Cmds[i] = string(randStringMessages(r))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 2)
	}
	return this
}

func NewPopulatedServerMessage_PlayerDeadData(r randyMessages, easy bool) *ServerMessage_PlayerDeadData {
	this := &ServerMessage_PlayerDeadData{}
	this.PlayerId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PlayerId *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 2)
	}
	return this
}

func NewPopulatedPlayerCommandMessage(r randyMessages, easy bool) *PlayerCommandMessage {
	this := &PlayerCommandMessage{}
	this.Cmd = CommandType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}[r.Intn(14)])
	this.Value = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Value *= -1
	}
	this.ActionId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ActionId *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 6)
	}
	return this
}

func NewPopulatedClientMessage(r randyMessages, easy bool) *ClientMessage {
	this := &ClientMessage{}
	this.Typ = MessageType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8}[r.Intn(9)])
	v4 := NewPopulatedPlayerCommandMessage(r, easy)
	this.Cmd = *v4
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 3)
	}
	return this
}

func NewPopulatedClientMessages(r randyMessages, easy bool) *ClientMessages {
	this := &ClientMessages{}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Messages = make([]*ClientMessage, v5)
		for i := 0; i < v5; i++ {
			this.Messages[i] = NewPopulatedClientMessage(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 2)
	}
	return this
}

type randyMessages interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMessages(r randyMessages) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMessages(r randyMessages) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneMessages(r)
	}
	return string(tmps)
}
func randUnrecognizedMessages(r randyMessages, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMessages(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMessages(dAtA []byte, r randyMessages, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMessages(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMessages(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Property) Size() (n int) {
	var l int
	_ = l
	l = len(m.Resource)
	n += 1 + l + sovMessages(uint64(l))
	l = len(m.Value)
	n += 1 + l + sovMessages(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpriteState) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMessages(uint64(m.Id))
	n += 1 + sovMessages(uint64(m.Typ))
	n += 9
	n += 9
	n += 9
	n += 9
	n += 1 + sovMessages(uint64(m.Height))
	n += 1 + sovMessages(uint64(m.Width))
	n += 9
	n += 9
	n += 1 + sovMessages(uint64(m.PlayerId))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerState) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMessages(uint64(m.Id))
	l = len(m.Name)
	n += 1 + l + sovMessages(uint64(l))
	n += 1 + sovMessages(uint64(m.ShipId))
	if len(m.Inventory) > 0 {
		for _, e := range m.Inventory {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerState_Inventory) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMessages(uint64(m.ResourceType))
	n += 1 + sovMessages(uint64(m.Value))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerMessage) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMessages(uint64(m.Typ))
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Players != nil {
		l = m.Players.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Initialize != nil {
		l = m.Initialize.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Sound != nil {
		l = m.Sound.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Draw != nil {
		l = m.Draw.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Dead != nil {
		l = m.Dead.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerMessage_PhysicsUpdateData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMessages(uint64(m.TimeNanos))
	n += 1 + sovMessages(uint64(m.Frame))
	n += 1 + sovMessages(uint64(m.Actionid))
	if len(m.Sprites) > 0 {
		for _, e := range m.Sprites {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerMessage_PlayerUpdateData) Size() (n int) {
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerMessage_InitializePlayerData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMessages(uint64(m.PlayerId))
	n += 1 + sovMessages(uint64(m.ShipId))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerMessage_PlaySoundData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMessages(uint64(m.SoundType))
	n += 9
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerMessage_DrawData) Size() (n int) {
	var l int
	_ = l
	if len(m.Cmds) > 0 {
		for _, s := range m.Cmds {
			l = len(s)
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerMessage_PlayerDeadData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMessages(uint64(m.PlayerId))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerCommandMessage) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMessages(uint64(m.Cmd))
	n += 9
	n += 1 + sovMessages(uint64(m.ActionId))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientMessage) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMessages(uint64(m.Typ))
	l = m.Cmd.Size()
	n += 1 + l + sovMessages(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientMessages) Size() (n int) {
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessages(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Property) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Property{`,
		`Resource:` + fmt.Sprintf("%v", this.Resource) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpriteState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpriteState{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Typ:` + fmt.Sprintf("%v", this.Typ) + `,`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`Vx:` + fmt.Sprintf("%v", this.Vx) + `,`,
		`Vy:` + fmt.Sprintf("%v", this.Vy) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Rotation:` + fmt.Sprintf("%v", this.Rotation) + `,`,
		`Mass:` + fmt.Sprintf("%v", this.Mass) + `,`,
		`PlayerId:` + fmt.Sprintf("%v", this.PlayerId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlayerState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlayerState{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ShipId:` + fmt.Sprintf("%v", this.ShipId) + `,`,
		`Inventory:` + strings.Replace(fmt.Sprintf("%v", this.Inventory), "PlayerState_Inventory", "PlayerState_Inventory", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlayerState_Inventory) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlayerState_Inventory{`,
		`ResourceType:` + fmt.Sprintf("%v", this.ResourceType) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerMessage{`,
		`Typ:` + fmt.Sprintf("%v", this.Typ) + `,`,
		`Update:` + strings.Replace(fmt.Sprintf("%v", this.Update), "ServerMessage_PhysicsUpdateData", "ServerMessage_PhysicsUpdateData", 1) + `,`,
		`Players:` + strings.Replace(fmt.Sprintf("%v", this.Players), "ServerMessage_PlayerUpdateData", "ServerMessage_PlayerUpdateData", 1) + `,`,
		`Initialize:` + strings.Replace(fmt.Sprintf("%v", this.Initialize), "ServerMessage_InitializePlayerData", "ServerMessage_InitializePlayerData", 1) + `,`,
		`Sound:` + strings.Replace(fmt.Sprintf("%v", this.Sound), "ServerMessage_PlaySoundData", "ServerMessage_PlaySoundData", 1) + `,`,
		`Draw:` + strings.Replace(fmt.Sprintf("%v", this.Draw), "ServerMessage_DrawData", "ServerMessage_DrawData", 1) + `,`,
		`Dead:` + strings.Replace(fmt.Sprintf("%v", this.Dead), "ServerMessage_PlayerDeadData", "ServerMessage_PlayerDeadData", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerMessage_PhysicsUpdateData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerMessage_PhysicsUpdateData{`,
		`TimeNanos:` + fmt.Sprintf("%v", this.TimeNanos) + `,`,
		`Frame:` + fmt.Sprintf("%v", this.Frame) + `,`,
		`Actionid:` + fmt.Sprintf("%v", this.Actionid) + `,`,
		`Sprites:` + strings.Replace(fmt.Sprintf("%v", this.Sprites), "SpriteState", "SpriteState", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerMessage_PlayerUpdateData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerMessage_PlayerUpdateData{`,
		`Player:` + strings.Replace(fmt.Sprintf("%v", this.Player), "PlayerState", "PlayerState", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerMessage_InitializePlayerData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerMessage_InitializePlayerData{`,
		`PlayerId:` + fmt.Sprintf("%v", this.PlayerId) + `,`,
		`ShipId:` + fmt.Sprintf("%v", this.ShipId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerMessage_PlaySoundData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerMessage_PlaySoundData{`,
		`SoundType:` + fmt.Sprintf("%v", this.SoundType) + `,`,
		`Volume:` + fmt.Sprintf("%v", this.Volume) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerMessage_DrawData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerMessage_DrawData{`,
		`Cmds:` + fmt.Sprintf("%v", this.Cmds) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerMessage_PlayerDeadData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerMessage_PlayerDeadData{`,
		`PlayerId:` + fmt.Sprintf("%v", this.PlayerId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlayerCommandMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlayerCommandMessage{`,
		`Cmd:` + fmt.Sprintf("%v", this.Cmd) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`ActionId:` + fmt.Sprintf("%v", this.ActionId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientMessage{`,
		`Typ:` + fmt.Sprintf("%v", this.Typ) + `,`,
		`Cmd:` + strings.Replace(strings.Replace(this.Cmd.String(), "PlayerCommandMessage", "PlayerCommandMessage", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientMessages) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientMessages{`,
		`Messages:` + strings.Replace(fmt.Sprintf("%v", this.Messages), "ClientMessage", "ClientMessage", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessages(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Property) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Property: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Property: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("resource")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("value")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpriteState) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpriteState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpriteState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.X = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Y = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vx", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Vx = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vy", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Vy = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Rotation = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Mass = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000400)
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("typ")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("x")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("y")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("vx")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("vy")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("height")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("width")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("rotation")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("mass")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("playerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerState) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipId", wireType)
			}
			m.ShipId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inventory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inventory = append(m.Inventory, &PlayerState_Inventory{})
			if err := m.Inventory[len(m.Inventory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("shipId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerState_Inventory) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inventory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inventory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			m.ResourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceType |= (PlayerResourceType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("resourceType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("value")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &ServerMessage_PhysicsUpdateData{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Players == nil {
				m.Players = &ServerMessage_PlayerUpdateData{}
			}
			if err := m.Players.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initialize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Initialize == nil {
				m.Initialize = &ServerMessage_InitializePlayerData{}
			}
			if err := m.Initialize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sound == nil {
				m.Sound = &ServerMessage_PlaySoundData{}
			}
			if err := m.Sound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Draw == nil {
				m.Draw = &ServerMessage_DrawData{}
			}
			if err := m.Draw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dead == nil {
				m.Dead = &ServerMessage_PlayerDeadData{}
			}
			if err := m.Dead.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("typ")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerMessage_PhysicsUpdateData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhysicsUpdateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhysicsUpdateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNanos", wireType)
			}
			m.TimeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			m.Frame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frame |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actionid", wireType)
			}
			m.Actionid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Actionid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sprites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sprites = append(m.Sprites, &SpriteState{})
			if err := m.Sprites[len(m.Sprites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("time_nanos")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("frame")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerMessage_PlayerUpdateData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerUpdateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerUpdateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &PlayerState{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("player")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerMessage_InitializePlayerData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitializePlayerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitializePlayerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipId", wireType)
			}
			m.ShipId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("playerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("shipId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerMessage_PlaySoundData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaySoundData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaySoundData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoundType", wireType)
			}
			m.SoundType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoundType |= (SoundType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Volume = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("soundType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerMessage_DrawData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmds = append(m.Cmds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerMessage_PlayerDeadData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDeadData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDeadData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("playerId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerCommandMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerCommandMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerCommandMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= (CommandType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Value = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionId", wireType)
			}
			m.ActionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cmd")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cmd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("typ")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cmd")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &ClientMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessages
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessages(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessages = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("core/messages.proto", fileDescriptorMessages) }

var fileDescriptorMessages = []byte{
	// 1356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xae, 0xd7, 0x8e, 0xfd, 0x6c, 0x27, 0x93, 0x49, 0x54, 0xad, 0xfc, 0xad, 0xfc, 0x0d,
	0xa6, 0x48, 0x69, 0x81, 0x04, 0x05, 0x09, 0x4e, 0x05, 0xd5, 0x69, 0x4b, 0x83, 0xda, 0xd4, 0xb2,
	0x4b, 0x39, 0xa2, 0xa9, 0x77, 0x6c, 0x0f, 0x5d, 0xef, 0xac, 0x76, 0xc7, 0x6e, 0xdc, 0x0b, 0x3e,
	0xc2, 0x9f, 0x81, 0x2a, 0x01, 0xff, 0x00, 0xe2, 0x5f, 0xe8, 0x91, 0x23, 0x27, 0xd4, 0xf8, 0xc4,
	0x91, 0x23, 0x47, 0x34, 0x3f, 0x76, 0x3d, 0x6e, 0x52, 0x90, 0xb8, 0x79, 0x3e, 0xf3, 0x3e, 0x6f,
	0xde, 0x7b, 0x9f, 0xf7, 0xde, 0x1a, 0x76, 0x06, 0x3c, 0xa1, 0x87, 0x13, 0x9a, 0xa6, 0x64, 0x44,
	0xd3, 0x83, 0x38, 0xe1, 0x82, 0x63, 0x4f, 0x82, 0xcd, 0xf7, 0x47, 0x4c, 0x8c, 0xa7, 0x4f, 0x0e,
	0x06, 0x7c, 0x72, 0x38, 0xe2, 0x23, 0x7e, 0xa8, 0x2e, 0x9f, 0x4c, 0x87, 0xea, 0xa4, 0x0e, 0xea,
	0x97, 0x26, 0xb5, 0xef, 0x41, 0xa5, 0x9b, 0xf0, 0x98, 0x26, 0x62, 0x8e, 0xf7, 0xa0, 0x92, 0xd0,
	0x94, 0x4f, 0x93, 0x01, 0xf5, 0x9d, 0x3d, 0x77, 0xbf, 0xda, 0xf1, 0x5e, 0xfe, 0xfe, 0xff, 0x42,
	0x2f, 0x47, 0x71, 0x13, 0x4a, 0x33, 0x12, 0x4e, 0xa9, 0xef, 0x5a, 0xd7, 0x1a, 0x6a, 0xff, 0xe8,
	0x42, 0xad, 0x1f, 0x27, 0x4c, 0xd0, 0xbe, 0x20, 0x82, 0xe2, 0x5d, 0x70, 0x59, 0xa0, 0xfc, 0x94,
	0x8c, 0xa1, 0xcb, 0x02, 0x7c, 0x05, 0x8a, 0x62, 0x1e, 0x2b, 0x7e, 0xc3, 0xc0, 0x12, 0xc0, 0x18,
	0x9c, 0x33, 0xbf, 0xb8, 0xe7, 0xee, 0x3b, 0x06, 0x75, 0xce, 0x24, 0x36, 0xf7, 0x3d, 0x1b, 0x9b,
	0x4b, 0xaf, 0xb3, 0x33, 0xbf, 0x64, 0x81, 0xee, 0xec, 0x4c, 0xa1, 0x73, 0xbf, 0xbc, 0x86, 0xce,
	0xf1, 0x55, 0x28, 0x8f, 0x29, 0x1b, 0x8d, 0x85, 0xbf, 0x61, 0x45, 0x61, 0x30, 0x99, 0xcb, 0x33,
	0x16, 0x88, 0xb1, 0x5f, 0xb1, 0x2e, 0x35, 0xa4, 0x2a, 0xc1, 0x05, 0x11, 0x8c, 0x47, 0x7e, 0xd5,
	0xf2, 0x9a, 0xa3, 0xd8, 0x07, 0x6f, 0x42, 0xd2, 0xd4, 0x07, 0xeb, 0x56, 0x21, 0x92, 0x1b, 0x87,
	0x64, 0x4e, 0x93, 0x93, 0xc0, 0xaf, 0x59, 0xae, 0x73, 0xb4, 0xfd, 0x9d, 0x0b, 0xb5, 0xae, 0x3a,
	0xfc, 0x53, 0xa5, 0x7c, 0xf0, 0x22, 0x32, 0x59, 0x2f, 0xb5, 0x42, 0x64, 0x5e, 0xe9, 0x98, 0xc5,
	0x27, 0x81, 0x2a, 0x58, 0x9e, 0x97, 0xc6, 0xf0, 0xa7, 0x50, 0x65, 0xd1, 0x8c, 0x46, 0x82, 0x27,
	0xb2, 0x7a, 0xc5, 0xfd, 0xda, 0xd1, 0xff, 0x0e, 0x64, 0x6b, 0x1c, 0x58, 0x6f, 0x1e, 0x9c, 0x64,
	0x26, 0x8a, 0xed, 0xf4, 0x56, 0x9c, 0xe6, 0x53, 0xa8, 0xe6, 0xb7, 0xb8, 0x03, 0xf5, 0x4c, 0xfd,
	0x47, 0xf3, 0x58, 0xf7, 0xc5, 0xe6, 0x91, 0x6f, 0x3b, 0xec, 0x59, 0xf7, 0x26, 0x96, 0x35, 0xce,
	0x7a, 0xd7, 0x94, 0xd6, 0xbb, 0xe6, 0xfb, 0x0d, 0x68, 0xf4, 0x69, 0x32, 0xa3, 0xc9, 0x03, 0xdd,
	0xcd, 0xf8, 0xba, 0xee, 0x10, 0xfd, 0xd0, 0xb6, 0x7e, 0xc8, 0xdc, 0x59, 0x2f, 0xa8, 0xa6, 0xb9,
	0x09, 0xe5, 0x69, 0x1c, 0x10, 0x21, 0x3d, 0x3b, 0xfb, 0xb5, 0xa3, 0x77, 0xb4, 0xf5, 0x9a, 0xbf,
	0x83, 0xee, 0x78, 0x9e, 0xb2, 0x41, 0xfa, 0x85, 0x32, 0xbc, 0x4d, 0x04, 0xe9, 0x19, 0x12, 0xfe,
	0x04, 0x36, 0xb4, 0x26, 0xa9, 0x5f, 0x54, 0xfc, 0x6b, 0x97, 0xf2, 0x95, 0x89, 0x45, 0xcf, 0x48,
	0xf8, 0x1e, 0x00, 0x8b, 0x98, 0x60, 0x24, 0x64, 0xcf, 0xa9, 0xef, 0x29, 0x17, 0xfb, 0x97, 0xb9,
	0x38, 0xc9, 0xad, 0xb4, 0x33, 0xe5, 0xc6, 0xe2, 0xe2, 0x8f, 0xa1, 0x94, 0xf2, 0x69, 0x14, 0xf8,
	0x25, 0xe5, 0xe4, 0xad, 0x37, 0xc5, 0xd1, 0x97, 0x46, 0x8a, 0xad, 0xed, 0xf1, 0x07, 0xe0, 0x05,
	0x09, 0x79, 0xe6, 0x97, 0x15, 0xef, 0xea, 0x65, 0xbc, 0xdb, 0x09, 0x79, 0xa6, 0x28, 0xca, 0x12,
	0x7f, 0x04, 0x5e, 0x40, 0x49, 0xe0, 0x6f, 0x28, 0x46, 0xfb, 0xcd, 0x19, 0xdf, 0xa6, 0x24, 0x30,
	0x3c, 0x4a, 0x82, 0xe6, 0x0b, 0x07, 0xb6, 0x2f, 0x94, 0x12, 0xbf, 0x0d, 0x20, 0xd8, 0x84, 0x7e,
	0x15, 0x91, 0x88, 0xa7, 0x4a, 0xb3, 0xa2, 0x11, 0xa8, 0x2a, 0xf1, 0x53, 0x09, 0x4b, 0xfd, 0x87,
	0x49, 0xd6, 0xca, 0xb9, 0xfe, 0x0a, 0x92, 0xd3, 0x42, 0x06, 0x72, 0xa2, 0x58, 0xa0, 0x44, 0xc8,
	0xa7, 0x25, 0x43, 0xf1, 0xbb, 0xb0, 0x91, 0xaa, 0xb5, 0x92, 0xfa, 0x65, 0xd5, 0xcd, 0xa6, 0x27,
	0xac, 0x5d, 0xd3, 0xcb, 0x2c, 0x9a, 0x37, 0x01, 0xbd, 0xae, 0x17, 0xbe, 0x0e, 0x65, 0xad, 0x98,
	0x8a, 0x2f, 0xe7, 0x5b, 0xd3, 0xd0, 0x33, 0x06, 0xcd, 0xc7, 0xb0, 0x7b, 0x99, 0x56, 0x6b, 0x33,
	0xed, 0x5c, 0x36, 0xd3, 0xd6, 0x4c, 0xba, 0x17, 0x67, 0xb2, 0xf9, 0x04, 0x1a, 0x6b, 0xf2, 0xe1,
	0x0f, 0xa1, 0xaa, 0x04, 0xb4, 0x66, 0x6a, 0xcb, 0xa4, 0x95, 0xc1, 0x59, 0x1d, 0x73, 0x3b, 0xf9,
	0xc6, 0x8c, 0x87, 0xd3, 0x89, 0x6e, 0xf7, 0x6c, 0xeb, 0x18, 0xac, 0x79, 0x0d, 0x2a, 0x99, 0xd4,
	0x72, 0x77, 0x0c, 0x26, 0x81, 0x14, 0xa4, 0xb8, 0xda, 0x1d, 0x12, 0x69, 0x1e, 0xc1, 0xe6, 0xba,
	0xbc, 0xff, 0x9e, 0x5b, 0xfb, 0x1b, 0xd8, 0xd5, 0x9c, 0x63, 0x3e, 0x99, 0x90, 0x28, 0xb0, 0x26,
	0x75, 0x30, 0x09, 0xd6, 0x27, 0xd5, 0x98, 0xd8, 0x93, 0x3a, 0x98, 0x04, 0xf6, 0x0a, 0x58, 0x45,
	0xae, 0xa1, 0x55, 0x0b, 0x9c, 0xe8, 0xfe, 0x7f, 0xad, 0x05, 0x4e, 0x82, 0x76, 0x04, 0x8d, 0xe3,
	0x90, 0xd1, 0x48, 0xfc, 0x87, 0x1d, 0x71, 0xa4, 0x83, 0x74, 0x95, 0xf4, 0x4d, 0x5b, 0xfa, 0xf5,
	0x6c, 0xac, 0x68, 0xdb, 0xb7, 0x60, 0x73, 0xed, 0xbd, 0x14, 0x1f, 0x42, 0x25, 0xfb, 0xda, 0xaa,
	0xa2, 0xd6, 0x8e, 0x76, 0x4c, 0xbe, 0xb6, 0x5d, 0x2f, 0x37, 0xba, 0xf1, 0x35, 0x54, 0xef, 0xf2,
	0x6c, 0x01, 0x6e, 0x41, 0xed, 0x94, 0xe7, 0x47, 0x54, 0x90, 0xc0, 0xa3, 0x71, 0x32, 0x4d, 0x85,
	0x02, 0x91, 0x83, 0x31, 0x6c, 0x1e, 0xf3, 0x30, 0x64, 0x29, 0xe3, 0x91, 0xc6, 0x5c, 0x69, 0xf4,
	0x59, 0x42, 0x66, 0x4c, 0x7f, 0x71, 0x50, 0x11, 0x23, 0xa8, 0x9b, 0xee, 0xd4, 0x26, 0x5e, 0xd3,
	0xfb, 0xf6, 0x45, 0xab, 0x70, 0xe3, 0x07, 0x07, 0x40, 0x4f, 0x83, 0x7a, 0x0d, 0x41, 0xfd, 0x94,
	0xaf, 0xce, 0xa8, 0x80, 0x01, 0xbc, 0xfe, 0x98, 0xc5, 0x68, 0xb1, 0xf0, 0xf0, 0x0e, 0x34, 0xee,
	0x93, 0x64, 0x44, 0x6f, 0xa5, 0x82, 0x26, 0x9c, 0x05, 0x68, 0xb1, 0xa8, 0x48, 0xb0, 0x3f, 0x21,
	0x61, 0x68, 0x81, 0x75, 0x5c, 0x87, 0x72, 0x67, 0x1a, 0x86, 0x54, 0xa0, 0xc5, 0x02, 0xe1, 0x2d,
	0xa8, 0x76, 0x42, 0x32, 0x78, 0x3a, 0xe6, 0x21, 0x45, 0x8b, 0xc5, 0xae, 0x72, 0x2a, 0x48, 0x82,
	0x16, 0x0b, 0x1f, 0x6f, 0x43, 0xad, 0x9b, 0xb0, 0xe7, 0x54, 0xbf, 0x8a, 0x16, 0x8b, 0xab, 0x92,
	0xdd, 0x0d, 0x49, 0xa4, 0xd8, 0x7b, 0x26, 0xd0, 0x2f, 0xa1, 0xbe, 0x9a, 0xda, 0x69, 0x2a, 0xb3,
	0xce, 0x22, 0xd5, 0x08, 0x2a, 0xc8, 0xe8, 0xfb, 0x63, 0x46, 0xc3, 0xe0, 0xd6, 0x40, 0xb0, 0x99,
	0xac, 0x0d, 0x40, 0xf9, 0x73, 0x2a, 0xd2, 0x87, 0x91, 0xae, 0x49, 0x77, 0x4c, 0x22, 0xc1, 0x27,
	0x0f, 0x78, 0x40, 0x51, 0xd1, 0x38, 0xfe, 0xc5, 0x81, 0x9a, 0xa5, 0x3f, 0xde, 0x86, 0xc6, 0x29,
	0xb7, 0x00, 0x54, 0x90, 0xd0, 0xda, 0xfa, 0x42, 0x8e, 0x7c, 0xca, 0x5e, 0x16, 0xc8, 0xc5, 0x0d,
	0xa8, 0xe6, 0x73, 0x8a, 0x8a, 0x92, 0x73, 0x37, 0xa1, 0xf4, 0x39, 0x95, 0x83, 0xc5, 0xa2, 0x11,
	0xf2, 0x64, 0x00, 0xf2, 0x60, 0x7c, 0xa3, 0x92, 0xf2, 0x6b, 0xb7, 0x13, 0x2a, 0xe3, 0xdd, 0x6c,
	0x09, 0xad, 0x76, 0x09, 0xda, 0xc0, 0x9b, 0x00, 0xab, 0xc9, 0x43, 0x15, 0x13, 0xf9, 0x63, 0xa8,
	0xe6, 0x13, 0xaf, 0xfb, 0x24, 0x3f, 0xa2, 0x82, 0x2c, 0xd0, 0x9d, 0xb3, 0x38, 0xe4, 0xb2, 0x2d,
	0x74, 0x50, 0x8e, 0xf4, 0xd3, 0xe1, 0x2c, 0x1a, 0xe9, 0xb3, 0xab, 0xce, 0x21, 0xe7, 0xb1, 0x09,
	0xda, 0xf8, 0xfd, 0xd9, 0x01, 0x7c, 0xf1, 0xf3, 0x8c, 0x7d, 0xd8, 0x3d, 0xe5, 0x17, 0x71, 0x54,
	0xc0, 0x57, 0x00, 0xdf, 0x67, 0x43, 0x7a, 0x27, 0xa2, 0xc9, 0x68, 0x9e, 0xdd, 0xe9, 0xce, 0xd4,
	0x7a, 0xe4, 0x98, 0x2b, 0x6d, 0xef, 0xcd, 0x63, 0x9a, 0xa4, 0x31, 0x19, 0xd0, 0x1c, 0x2f, 0xe2,
	0x1d, 0xd8, 0xea, 0x70, 0x2e, 0x7b, 0x28, 0x07, 0x3d, 0x59, 0xa0, 0xe3, 0x90, 0x93, 0xa7, 0x39,
	0x54, 0x92, 0x76, 0x8f, 0x12, 0x32, 0x10, 0x7c, 0x65, 0x57, 0x36, 0x71, 0x2f, 0x1d, 0xa8, 0x59,
	0x3b, 0x44, 0x2b, 0x69, 0x01, 0xaa, 0x9b, 0xcb, 0x3d, 0xf9, 0x37, 0xcc, 0xf4, 0x86, 0x1e, 0x24,
	0xe4, 0xe2, 0x0a, 0x78, 0x77, 0x59, 0x22, 0xe3, 0xa8, 0x43, 0x45, 0xc7, 0xfc, 0x30, 0x42, 0x9e,
	0x14, 0xd5, 0x9c, 0x86, 0x43, 0x54, 0xc2, 0x35, 0xd8, 0x30, 0x41, 0xa2, 0xb2, 0xe4, 0x77, 0xc7,
	0x24, 0xa5, 0x89, 0x16, 0x68, 0x95, 0x15, 0xaa, 0xe0, 0x2a, 0x94, 0x54, 0xe0, 0xa8, 0xaa, 0x8a,
	0x40, 0x85, 0x9e, 0x86, 0x7e, 0x4c, 0x69, 0x80, 0x40, 0xaa, 0x2c, 0xb1, 0x6c, 0x26, 0x1e, 0x90,
	0x34, 0x45, 0x35, 0xf9, 0x98, 0x49, 0xed, 0x61, 0x84, 0xea, 0xd2, 0x67, 0x76, 0x1c, 0x0e, 0x51,
	0x43, 0x27, 0xd9, 0x79, 0xef, 0xe5, 0x79, 0xab, 0xf0, 0xdb, 0x79, 0xab, 0xf0, 0xea, 0xbc, 0xe5,
	0xfc, 0x79, 0xde, 0x72, 0xfe, 0x3a, 0x6f, 0x39, 0x8b, 0x65, 0xcb, 0xf9, 0x69, 0xd9, 0x72, 0x5e,
	0x2e, 0x5b, 0xce, 0xaf, 0xcb, 0x96, 0xf3, 0x6a, 0xd9, 0x72, 0xfe, 0x58, 0xb6, 0x9c, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x69, 0xd5, 0x7a, 0x40, 0xed, 0x0b, 0x00, 0x00,
}
